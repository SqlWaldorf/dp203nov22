{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "asaworkspace91628xh"
		},
		"AzureBlobStorage1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage1'"
		},
		"AzureBlobStorage2_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage2'"
		},
		"CosmosDb1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'CosmosDb1'"
		},
		"asadatalake91628xh_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'asadatalake91628xh'"
		},
		"asastore91628xh_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'asastore91628xh'"
		},
		"asaworkspace91628xh-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'asaworkspace91628xh-WorkspaceDefaultSqlServer'"
		},
		"espcdemodb_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'espcdemodb'"
		},
		"sqlpool01_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'sqlpool01'"
		},
		"asadatalake91628xh_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://asadatalake91628xh.dfs.core.windows.net"
		},
		"asakeyvault91628xh_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://asakeyvault91628xh.vault.azure.net/"
		},
		"asaworkspace91628xh-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://asadatalake91628xh.dfs.core.windows.net"
		},
		"demokeyvault_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://asakeyvault91628xh.vault.azure.net/"
		},
		"taxipq_sasUri": {
			"type": "secureString",
			"metadata": "Secure string for 'sasUri' of 'taxipq'"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/CopyPipeline_09b')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy_09b",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "purviewsource/babs/201508_station_data.csv"
							},
							{
								"name": "Destination",
								"value": "purviewsource/parquetdest/"
							}
						],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"skipLineCount": 0
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"validateDataConsistency": false
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_09b",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_09b",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_09b')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_09b')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CopyPipeline_k59')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy_k59",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "purviewsource/contoso/DimCustomer/"
							},
							{
								"name": "Destination",
								"value": "dbo.CustomerUntyped"
							}
						],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"skipLineCount": 0
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"validateDataConsistency": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"type": "String",
											"ordinal": 1
										},
										"sink": {
											"name": "Column1",
											"type": "String"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 2
										},
										"sink": {
											"name": "Column2",
											"type": "String"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 3
										},
										"sink": {
											"name": "Column3",
											"type": "String"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 4
										},
										"sink": {
											"name": "Column4",
											"type": "String"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 5
										},
										"sink": {
											"name": "Column5",
											"type": "String"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 6
										},
										"sink": {
											"name": "Column6",
											"type": "String"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 7
										},
										"sink": {
											"name": "Column7",
											"type": "String"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 8
										},
										"sink": {
											"name": "Column8",
											"type": "String"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 9
										},
										"sink": {
											"name": "Column9",
											"type": "String"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 10
										},
										"sink": {
											"name": "Column10",
											"type": "String"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 11
										},
										"sink": {
											"name": "Column11",
											"type": "String"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 12
										},
										"sink": {
											"name": "Column12",
											"type": "String"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 13
										},
										"sink": {
											"name": "Column13",
											"type": "String"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 14
										},
										"sink": {
											"name": "Column14",
											"type": "String"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 15
										},
										"sink": {
											"name": "Column15",
											"type": "String"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 16
										},
										"sink": {
											"name": "Column16",
											"type": "String"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 17
										},
										"sink": {
											"name": "Column17",
											"type": "String"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 18
										},
										"sink": {
											"name": "Column18",
											"type": "String"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 19
										},
										"sink": {
											"name": "Column19",
											"type": "String"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 20
										},
										"sink": {
											"name": "Column20",
											"type": "String"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 21
										},
										"sink": {
											"name": "Column21",
											"type": "String"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 22
										},
										"sink": {
											"name": "Column22",
											"type": "String"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 23
										},
										"sink": {
											"name": "Column23",
											"type": "String"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 24
										},
										"sink": {
											"name": "Column24",
											"type": "String"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 25
										},
										"sink": {
											"name": "Column25",
											"type": "String"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 26
										},
										"sink": {
											"name": "Column26",
											"type": "String"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 27
										},
										"sink": {
											"name": "Column27",
											"type": "String"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 28
										},
										"sink": {
											"name": "Column28",
											"type": "String"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 29
										},
										"sink": {
											"name": "Column29",
											"type": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_k59",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_k59",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_k59')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_k59')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DelimitedText1')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "generator-customer-clean.csv",
						"folderPath": "data-generators",
						"container": "wwi-02"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_09b')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "parquetdest",
						"container": "purviewsource"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_9qa')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "espcdemodb",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CustomerKey",
						"type": "int",
						"precision": 10,
						"scale": 0
					},
					{
						"name": "GeographyKey",
						"type": "int",
						"precision": 10,
						"scale": 0
					},
					{
						"name": "CustomerAlternateKey",
						"type": "nvarchar",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "Title",
						"type": "nvarchar",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "FirstName",
						"type": "nvarchar",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "MiddleName",
						"type": "nvarchar",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "AddressLine1",
						"type": "nvarchar",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "AddressLine2",
						"type": "nvarchar",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "Phone",
						"type": "nvarchar",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "DateFirstPurchase",
						"type": "date",
						"precision": 10,
						"scale": 0
					},
					{
						"name": "CommuteDistance",
						"type": "nvarchar",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "FrenchEducation",
						"type": "nvarchar",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "EnglishOccupation",
						"type": "nvarchar",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "SpanishOccupation",
						"type": "nvarchar",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "FrenchOccupation",
						"type": "nvarchar",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "HouseOwnerFlag",
						"type": "nchar",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "NumberCarsOwned",
						"type": "tinyint",
						"precision": 3,
						"scale": 0
					},
					{
						"name": "EmailAddress",
						"type": "nvarchar",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "YearlyIncome",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "TotalChildren",
						"type": "tinyint",
						"precision": 3,
						"scale": 0
					},
					{
						"name": "NumberChildrenAtHome",
						"type": "tinyint",
						"precision": 3,
						"scale": 0
					},
					{
						"name": "EnglishEducation",
						"type": "nvarchar",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "SpanishEducation",
						"type": "nvarchar",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "LastName",
						"type": "nvarchar",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "NameStyle",
						"type": "bit",
						"precision": 1,
						"scale": 0
					},
					{
						"name": "BirthDate",
						"type": "date",
						"precision": 10,
						"scale": 0
					},
					{
						"name": "MaritalStatus",
						"type": "nchar",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "Suffix",
						"type": "nvarchar",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "Gender",
						"type": "nvarchar",
						"precision": 0,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "DimCustomer"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/espcdemodb')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_k59')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "espcdemodb",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "CustomerUntyped"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/espcdemodb')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Parquet1')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "staging"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_09b')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "201508_station_data.csv",
						"folderPath": "babs",
						"container": "purviewsource"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "station_id",
						"type": "String"
					},
					{
						"name": "name",
						"type": "String"
					},
					{
						"name": "lat",
						"type": "String"
					},
					{
						"name": "long",
						"type": "String"
					},
					{
						"name": "dockcount",
						"type": "String"
					},
					{
						"name": "landmark",
						"type": "String"
					},
					{
						"name": "installation",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_9qa')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "contoso/DimCustomer",
						"container": "purviewsource"
					},
					"columnDelimiter": "|",
					"rowDelimiter": "\n",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_k59')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "contoso/DimCustomer",
						"container": "purviewsource"
					},
					"columnDelimiter": "|",
					"rowDelimiter": "\n",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureBlobStorage1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage1_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureBlobStorage2')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage2_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CosmosDb1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "CosmosDb",
				"typeProperties": {
					"connectionString": "[parameters('CosmosDb1_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PowerBIWorkspace1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "PowerBIWorkspace",
				"typeProperties": {
					"workspaceID": "dd6ce3f6-1f0f-4265-81c7-9e209ae38cde",
					"tenantID": "d4ce1c9b-aef6-4362-8384-82a820773bb7"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asadatalake91628xh')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('asadatalake91628xh_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('asadatalake91628xh_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asakeyvault91628xh')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('asakeyvault91628xh_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asastore91628xh')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('asastore91628xh_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asaworkspace91628xh-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('asaworkspace91628xh-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asaworkspace91628xh-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('asaworkspace91628xh-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/demokeyvault')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('demokeyvault_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/espcdemodb')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('espcdemodb_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/sqlpool01')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('sqlpool01_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "asakeyvault91628xh",
							"type": "LinkedServiceReference"
						},
						"secretName": "SQL-USER-ASA"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asakeyvault91628xh')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/taxipq')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"sasUri": "[parameters('taxipq_sasUri')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureIntegrationRuntime01')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "MemoryOptimized",
							"coreCount": 16,
							"timeToLive": 60
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/IntegrationRuntime1')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dataflow1')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "asadatalake91628xh",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Parquet1",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "aggregate1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CustomerId as short,",
						"          FirstName as string,",
						"          MiddleInitial as string,",
						"          LastName as string,",
						"          FullName as string,",
						"          Gender as string,",
						"          Age as short,",
						"          BirthDate as string,",
						"          Address_PostalCode as integer,",
						"          Address_Street as string,",
						"          Address_City as string,",
						"          Address_Country as string,",
						"          Mobile as string,",
						"          Email as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     limit: 100,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     fileSystem: 'wwi-02',",
						"     folderPath: 'data-generators',",
						"     fileName: 'generator-customer-clean.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> source1",
						"source1 aggregate(groupBy(Gender),",
						"     avgAge = avg(Age),",
						"     partitionBy('roundRobin', 2)) ~> aggregate1",
						"aggregate1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asadatalake91628xh')]",
				"[concat(variables('workspaceId'), '/datasets/Parquet1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Column Level Security')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "    /*  Column-level security feature in Azure Synapse simplifies the design and coding of security in application.\r\n        It ensures column level security by restricting column access to protect sensitive data. */\r\n\r\n    /* Scenario: In this scenario we will be working with two users. The first one is the CEO, he has access to all\r\n        data. The second one is DataAnalystMiami, this user doesn't have access to the confidential Revenue column\r\n        in the Sales table. Follow this lab, one step at a time to see how Column-level security removes access to the\r\n        Revenue column to DataAnalystMiami */\r\n\r\n    --Step 1: Let us see how this feature in Azure Synapse works. Before that let us have a look at the Campaign table.\r\n    select  Top 100 * from wwi_Security.Sale\r\n    where City is not null and state is not null\r\n\r\n    /*  Consider a scenario where there are two users.\r\n        A CEO, who is an authorized  personnel with access to all the information in the database\r\n        and a Data Analyst, to whom only required information should be presented.*/\r\n\r\n    -- Step:2 Verify the existence of the 'CEO' and 'DataAnalystMiami' users in the Datawarehouse.\r\n    SELECT Name as [User1] FROM sys.sysusers WHERE name = N'CEO';\r\n    SELECT Name as [User2] FROM sys.sysusers WHERE name = N'DataAnalystMiami';\r\n\r\n\r\n    -- Step:3 Now let us enforce column level security for the DataAnalystMiami.\r\n    /*  The Sales table in the warehouse has information like ProductID, Analyst, Product, CampaignName, Quantity, Region, State, City, RevenueTarget and Revenue.\r\n        The Revenue generated from every campaign is classified and should be hidden from DataAnalystMiami.\r\n    */\r\n\r\n    REVOKE SELECT ON wwi_security.Sale FROM DataAnalystMiami;\r\n    GRANT SELECT ON wwi_security.Sale([ProductID], [Analyst], [Product], [CampaignName],[Quantity], [Region], [State], [City], [RevenueTarget]) TO DataAnalystMiami;\r\n    -- This provides DataAnalystMiami access to all the columns of the Sale table but Revenue.\r\n\r\n    -- Step:4 Then, to check if the security has been enforced, we execute the following query with current User As 'DataAnalystMiami', this will result in an error\r\n    --  since DataAnalystMiami doesn't have select access to the Revenue column\r\n    EXECUTE AS USER ='DataAnalystMiami';\r\n    select TOP 100 * from wwi_security.Sale;\r\n    ---\r\n    -- The following query will succeed since we are not including the Revenue column in the query.\r\n    EXECUTE AS USER ='DataAnalystMiami';\r\n    select [ProductID], [Analyst], [Product], [CampaignName],[Quantity], [Region], [State], [City], [RevenueTarget] from wwi_security.Sale;\r\n    \r\n    -- Step:5 Whereas, the CEO of the company should be authorized with all the information present in the warehouse.To do so, we execute the following query.\r\n    Revert;\r\n    GRANT SELECT ON wwi_security.Sale TO CEO;  --Full access to all columns.\r\n\r\n    -- Step:6 Let us check if our CEO user can see all the information that is present. Assign Current User As 'CEO' and the execute the query\r\n    EXECUTE AS USER ='CEO'\r\n    select * from wwi_security.Sale\r\n    Revert;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "SQLPool01",
						"type": "SqlPool"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Data Warehouse Optimization')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT\r\n    FS.CustomerID\r\n    ,MIN(FS.Quantity) as MinQuantity\r\n    ,MAX(FS.Quantity) as MaxQuantity\r\n    ,AVG(FS.Price) as AvgPrice\r\n    ,AVG(FS.TotalAmount) as AvgTotalAmount\r\n    ,AVG(FS.ProfitAmount) as AvgProfitAmount\r\n    ,COUNT(DISTINCT FS.StoreId) as DistinctStores\r\nFROM\r\n    wwi_perf.Sale_Heap FS\r\nGROUP BY\r\n    FS.CustomerId",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "SQLPool01",
						"type": "SqlPool"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dynamic Data Masking')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "    -------------------------------------------------------------------------Dynamic Data Masking (DDM)----------------------------------------------------------------------------------------------------------\r\n    /*  Dynamic data masking helps prevent unauthorized access to sensitive data by enabling customers\r\n        to designate how much of the sensitive data to reveal with minimal impact on the application layer.\r\n        Let see how */\r\n\r\n    /* Scenario: WWI has identified sensitive information in the CustomerInfo table. They would like us to \r\n        obfuscate the CreditCard and Email columns of the CustomerInfo table to DataAnalysts */\r\n\r\n    -- Step:1 Let us first get a view of CustomerInfo table.\r\n    SELECT TOP (100) * FROM wwi_security.CustomerInfo;\r\n\r\n    -- Step:2 Let's confirm that there are no Dynamic Data Masking (DDM) applied on columns.\r\n    SELECT c.name, tbl.name as table_name, c.is_masked, c.masking_function  \r\n    FROM sys.masked_columns AS c  \r\n    JOIN sys.tables AS tbl\r\n        ON c.[object_id] = tbl.[object_id]  \r\n    WHERE is_masked = 1\r\n        AND tbl.name = 'CustomerInfo';\r\n    -- No results returned verify that no data masking has been done yet.\r\n\r\n    -- Step:3 Now lets mask 'CreditCard' and 'Email' Column of 'CustomerInfo' table.\r\n    ALTER TABLE wwi_security.CustomerInfo  \r\n    ALTER COLUMN [CreditCard] ADD MASKED WITH (FUNCTION = 'partial(0,\"XXXX-XXXX-XXXX-\",4)');\r\n    GO\r\n    ALTER TABLE wwi_security.CustomerInfo\r\n    ALTER COLUMN Email ADD MASKED WITH (FUNCTION = 'email()');\r\n    GO\r\n    -- The columns are sucessfully masked.\r\n\r\n    -- Step:4 Let's see Dynamic Data Masking (DDM) applied on the two columns.\r\n    SELECT c.name, tbl.name as table_name, c.is_masked, c.masking_function  \r\n    FROM sys.masked_columns AS c  \r\n    JOIN sys.tables AS tbl\r\n        ON c.[object_id] = tbl.[object_id]  \r\n    WHERE is_masked = 1\r\n        AND tbl.name ='CustomerInfo';\r\n\r\n    -- Step:5 Now, let us grant SELECT permission to 'DataAnalystMiami' on the 'CustomerInfo' table.\r\n   GRANT SELECT ON wwi_security.CustomerInfo TO DataAnalystMiami;  \r\n\r\n    -- Step:6 Logged in as  'DataAnalystMiami' let us execute the select query and view the result.\r\n    EXECUTE AS USER = 'DataAnalystMiami';  \r\n    SELECT * FROM wwi_security.CustomerInfo;\r\n\r\n    -- Step:7 Let us remove the data masking using UNMASK permission\r\n    GRANT UNMASK TO DataAnalystMiami;\r\n    EXECUTE AS USER = 'DataAnalystMiami';  \r\n    SELECT *\r\n    FROM wwi_security.CustomerInfo;\r\n    revert;\r\n    REVOKE UNMASK TO DataAnalystMiami;  \r\n\r\n    ----step:8 Reverting all the changes back to as it was.\r\n    ALTER TABLE wwi_security.CustomerInfo\r\n    ALTER COLUMN CreditCard DROP MASKED;\r\n    GO\r\n    ALTER TABLE wwi_security.CustomerInfo\r\n    ALTER COLUMN Email DROP MASKED;\r\n    GO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "SQLPool01",
						"type": "SqlPool"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Lab2')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "lab 2"
				},
				"content": {
					"query": "SELECT\n    TransactionDate, ProductId,\n        CAST(SUM(ProfitAmount) AS decimal(18,2)) AS [(sum) Profit],\n        CAST(AVG(ProfitAmount) AS decimal(18,2)) AS [(avg) Profit],\n        SUM(Quantity) AS [(sum) Quantity]\n\nFROM\n    OPENROWSET(\n        BULK 'https://asadatalake91628xh.dfs.core.windows.net/wwi-02/sale-small/Year=2019/Quarter=Q4/Month=12/Day=20191231/sale-small-20191231-snappy.parquet',\n        FORMAT = 'PARQUET'\n    ) AS [r] GROUP BY r.TransactionDate, r.ProductId;\n\nSELECT\n   count(*)\nFROM\n    OPENROWSET(\n        BULK 'https://asadatalake91628xh.dfs.core.windows.net/wwi-02/sale-small/Year=2019/*/*/*/*',\n        FORMAT = 'PARQUET'\n    ) AS [r]\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Row Level Security')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "/*\tRow level Security (RLS) in Azure Synapse enables us to use group membership to control access to rows in a table.\r\n\tAzure Synapse applies the access restriction every time the data access is attempted from any user. \r\n\tLet see how we can implement row level security in Azure Synapse.*/\r\n\r\n----------------------------------Row-Level Security (RLS), 1: Filter predicates------------------------------------------------------------------\r\n-- Step:1 The Sale table has two Analyst values: DataAnalystMiami and DataAnalystSanDiego. \r\n--     Each analyst has jurisdiction across a specific Region. DataAnalystMiami on the South East Region\r\n--      and DataAnalystSanDiego on the Far West region.\r\nSELECT DISTINCT Analyst, Region FROM wwi_security.Sale order by Analyst ;\r\n\r\n/* Scenario: WWI requires that an Analyst only see the data for their own data from their own region. The CEO should see ALL data.\r\n    In the Sale table, there is an Analyst column that we can use to filter data to a specific Analyst value. */\r\n\r\n/* We will define this filter using what is called a Security Predicate. This is an inline table-valued function that allows\r\n    us to evaluate additional logic, in this case determining if the Analyst executing the query is the same as the Analyst\r\n    specified in the Analyst column in the row. The function returns 1 (will return the row) when a row in the Analyst column is the same as the \r\n    user executing the query (@Analyst = USER_NAME()) or if the user executing the query is the CEO user (USER_NAME() = 'CEO')\r\n    whom has access to all data.\r\n*/\r\n\r\n-- Review any existing security predicates in the database\r\nSELECT * FROM sys.security_predicates\r\n\r\n--Step:2 Create a new Schema to hold the security predicate, then define the predicate function. It returns 1 (or True) when\r\n--  a row should be returned in the parent query.\r\nGO\r\n\r\nCREATE FUNCTION wwi_security.fn_securitypredicate(@Analyst AS sysname)  \r\n    RETURNS TABLE  \r\nWITH SCHEMABINDING  \r\nAS  \r\n    RETURN SELECT 1 AS fn_securitypredicate_result\r\n    WHERE @Analyst = USER_NAME() OR USER_NAME() = 'CEO'\r\nGO\r\n-- Now we define security policy that adds the filter predicate to the Sale table. This will filter rows based on their login name.\r\nCREATE SECURITY POLICY SalesFilter  \r\nADD FILTER PREDICATE wwi_security.fn_securitypredicate(Analyst)\r\nON wwi_security.Sale\r\nWITH (STATE = ON);\r\n\r\n------ Allow SELECT permissions to the Sale Table.------\r\nGRANT SELECT ON wwi_security.Sale TO CEO, DataAnalystMiami, DataAnalystSanDiego;\r\n\r\n-- Step:3 Let us now test the filtering predicate, by selecting data from the Sale table as 'DataAnalystMiami' user.\r\nEXECUTE AS USER = 'DataAnalystMiami' \r\nSELECT * FROM wwi_security.Sale;\r\nrevert;\r\n-- As we can see, the query has returned rows here Login name is DataAnalystMiami\r\n\r\n-- Step:4 Let us test the same for  'DataAnalystSanDiego' user.\r\nEXECUTE AS USER = 'DataAnalystSanDiego';\r\nSELECT * FROM wwi_security.Sale;\r\nrevert;\r\n-- RLS is working indeed.\r\n\r\n-- Step:5 The CEO should be able to see all rows in the table.\r\nEXECUTE AS USER = 'CEO';  \r\nSELECT * FROM wwi_security.Sale;\r\nrevert;\r\n-- And he can.\r\n\r\n--Step:6 To disable the security policy we just created above, we execute the following.\r\nALTER SECURITY POLICY SalesFilter  \r\nWITH (STATE = OFF);\r\n\r\nDROP SECURITY POLICY SalesFilter;\r\nDROP FUNCTION wwi_security.fn_securitypredicate;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "SQLPool01",
						"type": "SqlPool"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 1')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "CREATE VIEW CustomerInfo AS\nSELECT\n     *\nFROM\n    OPENROWSET(\n        BULK 'https://asadatalake91628xh.dfs.core.windows.net/wwi-02/customer-info/customerinfo.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n    HEADER_ROW = TRUE\n    ) AS [result]\n\n\nselect * from CustomerInfo;\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "demo",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/lab2 external table')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "lab 2"
				},
				"content": {
					"query": "IF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name = 'SynapseParquetFormat') \n\tCREATE EXTERNAL FILE FORMAT [SynapseParquetFormat] \n\tWITH ( FORMAT_TYPE = PARQUET)\nGO\n\nIF NOT EXISTS (SELECT * FROM sys.external_data_sources WHERE name = 'wwi-02_asadatalake91628xh_dfs_core_windows_net') \n\tCREATE EXTERNAL DATA SOURCE [wwi-02_asadatalake91628xh_dfs_core_windows_net] \n\tWITH (\n\t\tLOCATION = 'abfss://wwi-02@asadatalake91628xh.dfs.core.windows.net' \n\t)\nGO\n\nCREATE EXTERNAL TABLE All2019Sales (\n\t[TransactionId] varchar(4000) COLLATE Latin1_General_100_BIN2_UTF8,\n\t[CustomerId] int,\n\t[ProductId] smallint,\n\t[Quantity] smallint,\n\t[Price] numeric(38,18),\n\t[TotalAmount] numeric(38,18),\n\t[TransactionDate] int,\n\t[ProfitAmount] numeric(38,18),\n\t[Hour] smallint,\n\t[Minute] smallint,\n\t[StoreId] smallint\n\t)\n\tWITH (\n\tLOCATION = 'sale-small/Year=2019/*/*/*/*',\n\tDATA_SOURCE = [wwi-02_asadatalake91628xh_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.All2019Sales\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "demo",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/open source')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "lab 2"
				},
				"content": {
					"query": "IF NOT EXISTS (SELECT * FROM sys.symmetric_keys) BEGIN\n    declare @pasword nvarchar(400) = CAST(newid() as VARCHAR(400));\n    EXEC('CREATE MASTER KEY ENCRYPTION BY PASSWORD = ''' + @pasword + '''')\nEND\n\nCREATE DATABASE SCOPED CREDENTIAL [sqlondemand]\nWITH IDENTITY='SHARED ACCESS SIGNATURE',  \nSECRET = 'sv=2018-03-28&ss=bf&srt=sco&sp=rl&st=2019-10-14T12%3A10%3A25Z&se=2061-12-31T12%3A10%3A00Z&sig=KlSU2ullCscyTS0An0nozEpo4tO5JAgGBvw%2FJX2lguw%3D'\nGO\n\n-- Create external data source secured using credential\nCREATE EXTERNAL DATA SOURCE SqlOnDemandDemo WITH (\n    LOCATION = 'https://sqlondemandstorage.blob.core.windows.net',\n    CREDENTIAL = sqlondemand\n);\nGO\n\nCREATE EXTERNAL FILE FORMAT QuotedCsvWithHeader\nWITH (  \n    FORMAT_TYPE = DELIMITEDTEXT,\n    FORMAT_OPTIONS (\n        FIELD_TERMINATOR = ',',\n        STRING_DELIMITER = '\"',\n        FIRST_ROW = 2\n    )\n);\nGO\n\nCREATE EXTERNAL TABLE [population]\n(\n    [country_code] VARCHAR (5) COLLATE Latin1_General_BIN2,\n    [country_name] VARCHAR (100) COLLATE Latin1_General_BIN2,\n    [year] smallint,\n    [population] bigint\n)\nWITH (\n    LOCATION = 'csv/population/population.csv',\n    DATA_SOURCE = SqlOnDemandDemo,\n    FILE_FORMAT = QuotedCsvWithHeader\n);\nGO\n\nselect count(*) from [population];\n\nSELECT [country_code]\n    ,[country_name]\n    ,[year]\n    ,[population]\nFROM [dbo].[population]\nWHERE [year] = 2019 and population > 100000000;\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "demo",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Explore with Spark')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SparkPool01",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "84350e9c-10f1-438f-8b44-1021e6686242"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1",
						"state": {
							"85c8b2ac-baee-40b4-9b03-efc482418f71": {
								"type": "Synapse.DataFrame",
								"sync_state": {
									"table": {
										"rows": [
											{
												"0": "e067fc11-e07d-4517-bc93-f7dc4b44f35e",
												"1": "3",
												"2": "4581",
												"3": "4",
												"4": "20.84",
												"5": "91.696",
												"6": "20170501",
												"7": "26.048",
												"8": "2",
												"9": "30",
												"10": "7922"
											},
											{
												"0": "e067fc11-e07d-4517-bc93-f7dc4b44f35e",
												"1": "3",
												"2": "1365",
												"3": "4",
												"4": "26.52",
												"5": "116.688",
												"6": "20170501",
												"7": "29.436",
												"8": "2",
												"9": "30",
												"10": "7922"
											},
											{
												"0": "e067fc11-e07d-4517-bc93-f7dc4b44f35e",
												"1": "3",
												"2": "2641",
												"3": "4",
												"4": "29.71",
												"5": "130.724",
												"6": "20170501",
												"7": "37.4",
												"8": "2",
												"9": "30",
												"10": "7922"
											},
											{
												"0": "e067fc11-e07d-4517-bc93-f7dc4b44f35e",
												"1": "3",
												"2": "220",
												"3": "2",
												"4": "27.6",
												"5": "60.72",
												"6": "20170501",
												"7": "15.356",
												"8": "2",
												"9": "30",
												"10": "7922"
											},
											{
												"0": "e067fc11-e07d-4517-bc93-f7dc4b44f35e",
												"1": "3",
												"2": "110",
												"3": "3",
												"4": "28.41",
												"5": "93.753",
												"6": "20170501",
												"7": "33.0",
												"8": "2",
												"9": "30",
												"10": "7922"
											},
											{
												"0": "e067fc11-e07d-4517-bc93-f7dc4b44f35e",
												"1": "3",
												"2": "2",
												"3": "1",
												"4": "39.78",
												"5": "43.758",
												"6": "20170501",
												"7": "11.528",
												"8": "2",
												"9": "30",
												"10": "7922"
											},
											{
												"0": "cdd2ed88-8aae-4295-884a-ac4d40c3c33c",
												"1": "11",
												"2": "3323",
												"3": "1",
												"4": "30.52",
												"5": "33.572",
												"6": "20170501",
												"7": "10.252",
												"8": "20",
												"9": "43",
												"10": "3573"
											},
											{
												"0": "cdd2ed88-8aae-4295-884a-ac4d40c3c33c",
												"1": "11",
												"2": "4763",
												"3": "4",
												"4": "21.29",
												"5": "93.676",
												"6": "20170501",
												"7": "29.216",
												"8": "20",
												"9": "43",
												"10": "3573"
											},
											{
												"0": "cdd2ed88-8aae-4295-884a-ac4d40c3c33c",
												"1": "11",
												"2": "4070",
												"3": "1",
												"4": "35.76",
												"5": "39.336",
												"6": "20170501",
												"7": "10.076",
												"8": "20",
												"9": "43",
												"10": "3573"
											},
											{
												"0": "cdd2ed88-8aae-4295-884a-ac4d40c3c33c",
												"1": "11",
												"2": "582",
												"3": "3",
												"4": "34.05",
												"5": "112.365",
												"6": "20170501",
												"7": "28.578",
												"8": "20",
												"9": "43",
												"10": "3573"
											}
										],
										"schema": [
											{
												"key": "0",
												"name": "TransactionId",
												"type": "string"
											},
											{
												"key": "1",
												"name": "CustomerId",
												"type": "int"
											},
											{
												"key": "2",
												"name": "ProductId",
												"type": "int"
											},
											{
												"key": "3",
												"name": "Quantity",
												"type": "int"
											},
											{
												"key": "4",
												"name": "Price",
												"type": "double"
											},
											{
												"key": "5",
												"name": "TotalAmount",
												"type": "double"
											},
											{
												"key": "6",
												"name": "TransactionDate",
												"type": "int"
											},
											{
												"key": "7",
												"name": "ProfitAmount",
												"type": "double"
											},
											{
												"key": "8",
												"name": "Hour",
												"type": "int"
											},
											{
												"key": "9",
												"name": "Minute",
												"type": "int"
											},
											{
												"key": "10",
												"name": "StoreId",
												"type": "int"
											}
										],
										"truncated": false
									},
									"isSummary": false,
									"language": "scala"
								},
								"persist_state": {
									"view": {
										"type": "details",
										"chartOptions": {
											"chartType": "bar",
											"aggregationType": "sum",
											"categoryFieldKeys": [
												"0"
											],
											"seriesFieldKeys": [
												"1"
											],
											"isStacked": false
										}
									}
								}
							},
							"e9a46157-224a-4586-9c00-92211b3d03d2": {
								"type": "Synapse.DataFrame",
								"sync_state": {
									"table": {
										"rows": [
											null,
											{
												"0": "3",
												"1": "4581"
											},
											{
												"0": "3",
												"1": "1365"
											},
											{
												"0": "3",
												"1": "2"
											},
											{
												"0": "3",
												"1": "110"
											},
											{
												"0": "3",
												"1": "2641"
											},
											{
												"0": "3",
												"1": "220"
											},
											{
												"0": "11",
												"1": "4763"
											},
											{
												"0": "11",
												"1": "194"
											},
											{
												"0": "11",
												"1": "3323"
											},
											{
												"0": "11",
												"1": "70"
											},
											{
												"0": "11",
												"1": "32"
											},
											{
												"0": "11",
												"1": "4070"
											},
											{
												"0": "11",
												"1": "582"
											},
											{
												"0": "41",
												"1": "3009"
											},
											{
												"0": "41",
												"1": "88"
											},
											{
												"0": "41",
												"1": "1091"
											},
											{
												"0": "41",
												"1": "84"
											},
											{
												"0": "41",
												"1": "134"
											},
											{
												"0": "41",
												"1": "2726"
											},
											{
												"0": "41",
												"1": "4660"
											},
											{
												"0": "41",
												"1": "3564"
											},
											{
												"0": "41",
												"1": "186"
											},
											{
												"0": "41",
												"1": "126"
											},
											{
												"0": "41",
												"1": "3321"
											},
											{
												"0": "41",
												"1": "244"
											},
											{
												"0": "42",
												"1": "57"
											},
											{
												"0": "42",
												"1": "4544"
											},
											{
												"0": "42",
												"1": "2836"
											},
											{
												"0": "42",
												"1": "4843"
											},
											{
												"0": "42",
												"1": "2996"
											},
											{
												"0": "42",
												"1": "3256"
											},
											{
												"0": "42",
												"1": "35"
											},
											{
												"0": "42",
												"1": "229"
											},
											{
												"0": "43",
												"1": "4220"
											},
											{
												"0": "43",
												"1": "30"
											},
											{
												"0": "43",
												"1": "2031"
											},
											{
												"0": "43",
												"1": "3478"
											},
											{
												"0": "43",
												"1": "2776"
											},
											{
												"0": "43",
												"1": "153"
											},
											{
												"0": "43",
												"1": "412"
											},
											{
												"0": "52",
												"1": "2711"
											},
											{
												"0": "52",
												"1": "609"
											},
											{
												"0": "52",
												"1": "686"
											},
											{
												"0": "52",
												"1": "18"
											},
											{
												"0": "52",
												"1": "4260"
											},
											{
												"0": "52",
												"1": "619"
											},
											{
												"0": "52",
												"1": "160"
											},
											{
												"0": "52",
												"1": "209"
											},
											{
												"0": "52",
												"1": "4830"
											},
											{
												"0": "52",
												"1": "3604"
											},
											{
												"0": "61",
												"1": "2430"
											},
											{
												"0": "61",
												"1": "37"
											},
											{
												"0": "61",
												"1": "1302"
											},
											{
												"0": "61",
												"1": "1329"
											},
											{
												"0": "61",
												"1": "2482"
											},
											{
												"0": "61",
												"1": "2655"
											},
											{
												"0": "61",
												"1": "4196"
											},
											{
												"0": "61",
												"1": "176"
											},
											{
												"0": "61",
												"1": "3663"
											},
											{
												"0": "61",
												"1": "112"
											},
											{
												"0": "61",
												"1": "2751"
											},
											{
												"0": "64",
												"1": "48"
											},
											{
												"0": "64",
												"1": "1140"
											},
											{
												"0": "64",
												"1": "169"
											},
											{
												"0": "64",
												"1": "1397"
											},
											{
												"0": "64",
												"1": "3779"
											},
											{
												"0": "64",
												"1": "2551"
											},
											{
												"0": "64",
												"1": "3039"
											},
											{
												"0": "64",
												"1": "263"
											},
											{
												"0": "64",
												"1": "3352"
											},
											{
												"0": "64",
												"1": "2240"
											},
											{
												"0": "64",
												"1": "2229"
											},
											{
												"0": "64",
												"1": "1447"
											},
											{
												"0": "70",
												"1": "3514"
											},
											{
												"0": "70",
												"1": "226"
											},
											{
												"0": "70",
												"1": "1189"
											},
											{
												"0": "70",
												"1": "2549"
											},
											{
												"0": "70",
												"1": "2648"
											},
											{
												"0": "70",
												"1": "1911"
											},
											{
												"0": "70",
												"1": "4109"
											},
											{
												"0": "70",
												"1": "19"
											},
											{
												"0": "70",
												"1": "3645"
											},
											{
												"0": "70",
												"1": "4317"
											},
											{
												"0": "70",
												"1": "1564"
											},
											{
												"0": "88",
												"1": "2461"
											},
											{
												"0": "88",
												"1": "3551"
											},
											{
												"0": "88",
												"1": "172"
											},
											{
												"0": "88",
												"1": "3004"
											},
											{
												"0": "88",
												"1": "7"
											},
											{
												"0": "88",
												"1": "808"
											},
											{
												"0": "88",
												"1": "3231"
											},
											{
												"0": "88",
												"1": "1062"
											},
											{
												"0": "88",
												"1": "1604"
											},
											{
												"0": "91",
												"1": "6"
											},
											{
												"0": "91",
												"1": "607"
											},
											{
												"0": "91",
												"1": "1757"
											},
											{
												"0": "91",
												"1": "323"
											},
											{
												"0": "91",
												"1": "2465"
											},
											{
												"0": "91",
												"1": "2995"
											}
										],
										"schema": [
											{
												"key": "0",
												"name": "CustomerId",
												"type": "int"
											},
											{
												"key": "1",
												"name": "ProductId",
												"type": "int"
											}
										],
										"truncated": false
									},
									"isSummary": false,
									"language": "scala"
								},
								"persist_state": {
									"view": {
										"type": "details",
										"chartOptions": {
											"chartType": "bar",
											"aggregationType": "sum",
											"categoryFieldKeys": [
												"1"
											],
											"seriesFieldKeys": [
												"0"
											],
											"isStacked": false
										}
									}
								}
							},
							"abd1bdd9-b87d-47aa-bdcb-70d07f32586c": {
								"type": "Synapse.DataFrame",
								"sync_state": {
									"table": {
										"rows": [
											{
												"0": "931a8bd6-a895-449b-b073-9c4375450ef2",
												"1": "79330",
												"2": "55",
												"3": "1",
												"4": "18.960000000000000000",
												"5": "20.85600000000000168398628375",
												"6": "20170502",
												"7": "6.435000000000000519584375525",
												"8": "9",
												"9": "25",
												"10": "1364"
											},
											{
												"0": "931a8bd6-a895-449b-b073-9c4375450ef2",
												"1": "79330",
												"2": "66",
												"3": "1",
												"4": "28.730000000000000000",
												"5": "31.60300000000000255173659980",
												"6": "20170502",
												"7": "9.779000000000000789590615113",
												"8": "9",
												"9": "25",
												"10": "1364"
											},
											{
												"0": "931a8bd6-a895-449b-b073-9c4375450ef2",
												"1": "79330",
												"2": "143",
												"3": "3",
												"4": "26.630000000000000000",
												"5": "87.87900000000000709565739498",
												"6": "20170502",
												"7": "25.77300000000000208100203736",
												"8": "9",
												"9": "25",
												"10": "1364"
											},
											{
												"0": "800ce4cd-f278-47c7-a6ce-b4434c31b20e",
												"1": "79342",
												"2": "4220",
												"3": "3",
												"4": "25.420000000000000000",
												"5": "83.88600000000000677324862863",
												"6": "20170502",
												"7": "24.09000000000000194511073914",
												"8": "6",
												"9": "57",
												"10": "4756"
											},
											{
												"0": "800ce4cd-f278-47c7-a6ce-b4434c31b20e",
												"1": "79342",
												"2": "1921",
												"3": "1",
												"4": "24.550000000000000000",
												"5": "27.00500000000000218047802036",
												"6": "20170502",
												"7": "8.261000000000000667021993195",
												"8": "6",
												"9": "57",
												"10": "4756"
											},
											{
												"0": "800ce4cd-f278-47c7-a6ce-b4434c31b20e",
												"1": "79342",
												"2": "3361",
												"3": "1",
												"4": "37.840000000000000000",
												"5": "41.62400000000000336086714015",
												"6": "20170502",
												"7": "9.845000000000000794919685632",
												"8": "6",
												"9": "57",
												"10": "4756"
											},
											{
												"0": "800ce4cd-f278-47c7-a6ce-b4434c31b20e",
												"1": "79342",
												"2": "3976",
												"3": "3",
												"4": "22.440000000000000000",
												"5": "74.05200000000000597921712142",
												"6": "20170502",
												"7": "17.45700000000000140953915206",
												"8": "6",
												"9": "57",
												"10": "4756"
											},
											{
												"0": "800ce4cd-f278-47c7-a6ce-b4434c31b20e",
												"1": "79342",
												"2": "1012",
												"3": "4",
												"4": "26.080000000000000000",
												"5": "114.7520000000000092654772743",
												"6": "20170502",
												"7": "38.80800000000000313349346470",
												"8": "6",
												"9": "57",
												"10": "4756"
											},
											{
												"0": "800ce4cd-f278-47c7-a6ce-b4434c31b20e",
												"1": "79342",
												"2": "187",
												"3": "3",
												"4": "31.090000000000000000",
												"5": "102.5970000000000082840401205",
												"6": "20170502",
												"7": "28.38000000000000229150032283",
												"8": "6",
												"9": "57",
												"10": "4756"
											},
											{
												"0": "1909b806-f4ad-4347-a140-4b451256ae62",
												"1": "79356",
												"2": "1516",
												"3": "1",
												"4": "34.720000000000000000",
												"5": "38.19200000000000308375547320",
												"6": "20170502",
												"7": "12.99100000000000104893871367",
												"8": "20",
												"9": "15",
												"10": "6837"
											}
										],
										"schema": [
											{
												"key": "0",
												"name": "TransactionId",
												"type": "string"
											},
											{
												"key": "1",
												"name": "CustomerId",
												"type": "string"
											},
											{
												"key": "2",
												"name": "ProductId",
												"type": "string"
											},
											{
												"key": "3",
												"name": "Quantity",
												"type": "string"
											},
											{
												"key": "4",
												"name": "Price",
												"type": "string"
											},
											{
												"key": "5",
												"name": "TotalAmount",
												"type": "string"
											},
											{
												"key": "6",
												"name": "TransactionDateId",
												"type": "string"
											},
											{
												"key": "7",
												"name": "ProfitAmount",
												"type": "string"
											},
											{
												"key": "8",
												"name": "Hour",
												"type": "string"
											},
											{
												"key": "9",
												"name": "Minute",
												"type": "string"
											},
											{
												"key": "10",
												"name": "StoreId",
												"type": "string"
											}
										],
										"truncated": false
									},
									"isSummary": false,
									"language": "scala"
								},
								"persist_state": {
									"view": {
										"type": "details",
										"chartOptions": {
											"chartType": "bar",
											"aggregationType": "count",
											"categoryFieldKeys": [
												"0"
											],
											"seriesFieldKeys": [
												"0"
											],
											"isStacked": false
										}
									}
								}
							}
						}
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/d8feb544-acd0-4ea1-aac6-92f13bce8188/resourceGroups/data-engineering-synapse-91628xh/providers/Microsoft.Synapse/workspaces/asaworkspace91628xh/bigDataPools/SparkPool01",
						"name": "SparkPool01",
						"type": "Spark",
						"endpoint": "https://asaworkspace91628xh.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool01",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "2.4",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"source": [
							"# Exploring and fixing data with Synapse Spark\r\n",
							"\r\n",
							"In this task, you will use a Synapse Spark notebook to explore a few of the files in the **wwi-02/sale-poc** folder in the data lake. You will also use Python code to fix the issues with the **sale-20170502.csv** file.\r\n",
							"\r\n",
							"1. First, attach this notebook to the **SparkPool01** Spark pool.\r\n",
							"2. In the code cell below, replace **asadatalake*SUFFIX*** `with the name of the primary data lake storage account associated with your Syanpse workspace. Then execute the cell by selecting the **Run cell** button that becomes visible when you select the cell.\r\n",
							"\r\n",
							"> **Note**: The cell may take some time to run because the spark cluster must be started."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"adls_account_name = 'asadatalake91628xh'"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Exploring files with Spark\r\n",
							"\r\n",
							"1. The first step in exploring data using Synapse Spark is to load a file from the data lake. For this, we'll use the **spark.read.load()** method of the **SparkSession** to load the **sale-20170501.csv** file into a [DataFrame](https://spark.apache.org/docs/2.2.0/sql-programming-guide.html#datasets-and-dataframes).\r\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"# First, load the file `sale-20170501.csv` file, which we know from our previous exploration to be formatted correctly.\r\n",
							"# Note the use of the `header` and `inferSchema` parameters. Header indicates the first row of the file contains column headers,\r\n",
							"# and `inferSchema` instruct Spark to use data within the file to infer data types.\r\n",
							"df = spark.read.load(f'abfss://wwi-02@{adls_account_name}.dfs.core.windows.net/sale-poc/sale-20170501.csv', format='csv', header=True, inferSchema=True)"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "markdown",
						"source": [
							"## View the contents of the DataFrame\r\n",
							"\r\n",
							"With the data from the **sale-20170501.csv** file loaded into a data frame, we can now use various methods of a data frame to explore the properties of the data.\r\n",
							"\r\n",
							"1. Let's look at the data as it was imported. Execute the cell below to view and inspect the data in the data frame."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"diagram": {
								"activateDiagramType": 1,
								"chartConfig": {
									"category": "bar",
									"keys": [
										"TransactionId"
									],
									"values": [
										"CustomerId"
									],
									"yLabel": "CustomerId",
									"xLabel": "TransactionId",
									"aggregation": "SUM",
									"aggByBackend": false
								},
								"aggData": "{\"CustomerId\":{\"cdd2ed88-8aae-4295-884a-ac4d40c3c33c\":44,\"e067fc11-e07d-4517-bc93-f7dc4b44f35e\":18}}",
								"isSummary": false,
								"previewData": {
									"filter": null
								},
								"isSql": false
							},
							"collapsed": false
						},
						"source": [
							"display(df.limit(10))"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "markdown",
						"source": [
							"2. Like we saw during exploration with the SQL on-demand capabilities of Azure Synapse, Spark allows us to view and query against the data contained within files. \r\n",
							"\r\n",
							"3. Now, use the **printSchema()** method of the data frame to view the results of using the **inferSchema** parameter when creating the data frame. Execute the cell below and observe the output."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"# Now, print the inferred schema. We will need this information below to help with the missing headers in the May 2, 2017 file.\r\n",
							"df.printSchema()"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "markdown",
						"source": [
							"4. The **printSchema** method outputs both field names and data types that are based on the Spark engine's evaluation of the data contained within each field.\r\n",
							"\r\n",
							"    > We can use this information later to help define the schema for the poorly formed **sale-20170502.csv** file. In addition to the field names and data types, we should note the number of features or columns contained in the file. In this case, note that there are 11 fields. That will be used to determine where to split the single row of data.\r\n",
							"\r\n",
							"5. As an example of further exploration we can do, run the cell below to create and display a new data frame that contains an ordered list of distinct Customer and Product Id pairings. We can use these types of functions to find invalid or empty values quickly in targeted fields."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"diagram": {
								"activateDiagramType": 1,
								"chartConfig": {
									"category": "bar",
									"keys": [],
									"values": [
										"ProductId"
									],
									"yLabel": "ProductId",
									"xLabel": "",
									"aggregation": "SUM",
									"aggByBackend": false
								},
								"aggData": "{\"ProductId\":{\"\":189206}}",
								"isSummary": false,
								"previewData": {
									"filter": null
								},
								"isSql": false
							},
							"collapsed": false
						},
						"source": [
							"# Create a new data frame containing a list of distinct CustomerId and ProductId values in descending order of the CustomerId.\r\n",
							"df_distinct_products = df.select('CustomerId', 'ProductId').distinct().orderBy('CustomerId')\r\n",
							"\r\n",
							"# Display the first 100 rows of the resulting data frame.\r\n",
							"display(df_distinct_products.limit(100))"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "markdown",
						"source": [
							"6. Next, let's attempt to open and explore the **sale-20170502.csv** file using the **load()** method, as we did above."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"# Next, let's try to read in the May 2, 2017 file using the same `load()` method we used for the first file.\r\n",
							"df = spark.read.load(f'abfss://wwi-02@{adls_account_name}.dfs.core.windows.net/sale-poc/sale-20170502.csv', format='csv')\r\n",
							"display(df.limit(10))"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "markdown",
						"source": [
							"7. As we saw in T-SQL, we receive a similar error in Spark that the number of columns processed may have exceeded limit of 20480 columns. To work with the data in this file, we need to use more advanced methods, as you will see in the next section below.\n",
							""
						]
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Handling and fixing poorly formed CSV files\r\n",
							"\r\n",
							"> The steps below provide example code for fixing the poorly-formed CSV file, **sale-20170502.csv** we discovered during exploration of the files in the **wwi-02/sale-poc** folder. This is just one of many ways to handle \"fixing\" a poorly-formed CSV file using Spark.\r\n",
							"\r\n",
							"1. To \"fix\" the bad file, we need to take a programmatic approach, using Python to read in the contents of the file and then parse them to put them into the proper shape.\r\n",
							"\r\n",
							"    > To handle the data being in a single row, we can use the **textFile()** method of our **SparkContext** to read the file as a collection of rows into a resilient distributed dataset (RDD). This allows us to get around the errors around the number of columns because we are essentially getting a single string value stored in a single column.\r\n",
							"\r\n",
							"2. Execute the cell below to load the RDD with data from the file."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"# Import the NumPy library. NumPy is a python library used for working with arrays.\r\n",
							"import numpy as np\r\n",
							"\r\n",
							"# Read the CSV file into a resilient distributed dataset (RDD) as a text file. This will read each row of the file into rows in an RDD.\r\n",
							"rdd = sc.textFile(f'abfss://wwi-02@{adls_account_name}.dfs.core.windows.net/sale-poc/sale-20170502.csv')"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "markdown",
						"source": [
							"3. With the data now stored in an RDD, we can access the first, and only, populated row in the RDD, and split that into individual fields. We know from our inspection of the file in Notepad++ that it all the fields are separated by a comma (,), so let's start by splitting on that to create an array of field values. Execute the cell below to create a data array."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"# Since we know there is only one row, grab the first row of the RDD and split in on the field delimiter (comma).\r\n",
							"data = rdd.first().split(',')\r\n",
							"\r\n",
							"field_count = len(data)\r\n",
							"# Print out the count of fields read into the array.\r\n",
							"print(field_count)"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "markdown",
						"source": [
							"4. By splitting the row on the field delimiter, we created an array of all the individual field values in the file, the count of which you can see above.\n",
							"\n",
							"5. Now, run the cell below to do a quick calculation on the expected number of rows that will be generated by parsing every 11 fields into a single row."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"import math\r\n",
							"\r\n",
							"expected_row_count = math.floor(field_count / 11)\r\n",
							"print(f'The expected row count is: {expected_row_count}')"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "markdown",
						"source": [
							"6. Next, let's create an array to store the data associated with each \"row\".\r\n",
							"\r\n",
							"    > We will set the max_index to the number of columns that are expected in each row. We know from our exploration of other files in the **wwi-02/sale-poc** folder that they contain 11 columns, so that is the value we will set.\r\n",
							"\r\n",
							"7. In addition to setting variables, we will use the cell below to loop through the **data** array and assign every 11 values to a row. By doing this, we are able to \"split\" the data that was once a single row into appropriate rows containing the proper data and columns from the file.\r\n",
							"\r\n",
							"8. Execute the cell below to create an array of rows from the file data."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"# Create an array to store the data associated with each \"row\". Set the max_index to the number of columns that are in each row. This is 11, which we noted above when viewing the schema of the May 1 file.\r\n",
							"row_list = []\r\n",
							"max_index = 11\r\n",
							"\r\n",
							"# Now, we are going to loop through the array of values extracted from the single row of the file and build rows consisting of 11 columns.\r\n",
							"while max_index <= len(data):\r\n",
							"    row = [data[i] for i in np.arange(max_index-11, max_index)]\r\n",
							"    row_list.append(row)\r\n",
							"\r\n",
							"    max_index += 11\r\n",
							"\r\n",
							"print(f'The row array contains {len(row_list)} rows. The expected number of rows was {expected_row_count}.')"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "markdown",
						"source": [
							"9. The last thing we need to do to be able to work with the file data as rows is to read it into a Spark DataFrame. In the cell below, we use the **createDataFrame()** method to convert the **row_list** array into a data frame, which also adding names for the columns. Column names are based on the schema we observed in the well formatted files in the **wwi-02/sale-poc** directory.\r\n",
							"\r\n",
							"10. Execute the cell below to create a data frame containing row data from the file and then display the first 10 rows."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"diagram": {
								"activateDiagramType": 1,
								"chartConfig": {
									"category": "bar",
									"keys": [
										"TransactionId"
									],
									"values": [
										"TransactionId"
									],
									"yLabel": "TransactionId",
									"xLabel": "TransactionId",
									"aggregation": "COUNT",
									"aggByBackend": false
								},
								"aggData": "{\"TransactionId\":{\"5455a4b4-62bd-401a-b5c6-79ea24f30531\":5,\"a4116581-5aad-416a-b767-aefa516737b1\":5}}",
								"isSummary": false,
								"previewData": {
									"filter": null
								},
								"isSql": false
							},
							"collapsed": false
						},
						"source": [
							"# Finally, we can use the row_list we created above to create a DataFrame. We can add to this a schema parameter, which contains the column names we saw in the schema of the first file.\r\n",
							"df_fixed = spark.createDataFrame(row_list,schema=['TransactionId', 'CustomerId', 'ProductId', 'Quantity', 'Price', 'TotalAmount', 'TransactionDateId', 'ProfitAmount', 'Hour', 'Minute', 'StoreId'])\r\n",
							"display(df_fixed.limit(10))"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Write the \"fixed\" file into the data lake\r\n",
							"\r\n",
							"1. The last step we will take as part of our exploration and file fixing process is to write the data back into the data lake, so it can be ingested following the same process as the other files in the **wwi-02/sale-poc** folder.\r\n",
							"\r\n",
							"2. Execute the cell below to save the data frame into the data lake a series of files in a folder named **sale-20170502-fixed**.\r\n",
							"\r\n",
							"    > Note: Spark parallelizes workloads across worker nodes, so when saving files, you will notice they are saved as a collection \"part\" files, and not as a single file. While there are some libraries you can use to create a single file, it is helpful to get used to working with files generated via Spark notebooks as they are natively created.\r\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"df_fixed.write.format('csv').option('header',True).mode('overwrite').option('sep',',').save(f'abfss://wwi-02@{adls_account_name}.dfs.core.windows.net/sale-poc/sale-20170502-fixed')"
						],
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Inspect the fixed file in the data lake\r\n",
							"\r\n",
							"1. With the fixed file written to the data lake, you can quickly inpsect it to verify the files are now formatted properly. Select the **wwi-02** tab above to view the **sale-poc** folder.\r\n",
							"2. Refresh the folder view (expand the **More** menu if necessary) and then open the **sale-20170502-fixed** folder.\r\n",
							"3. In the **sale-20170502-fixed** folder, right-click the first file whose name begins with **part** and whose extension is **.csv** and select **Preview** from the context menu.\r\n",
							"4. In the **Preview** dialog, verify you see the proper columns and that the data looks valid in each field.\r\n",
							"\r\n",
							"## Wrap-up\r\n",
							"\r\n",
							"Throughout this exercise, you used a Spark notebook to explore data stored within files in the data lake. You used Python code to extract data from a poorly formatted CSV file, assemble the data from that file into proper rows, and then write the \"fixed\" file back out into your data lake.\r\n",
							"\r\n",
							"You can now return to the lab guide to continue with the next section of Lab 2.\r\n",
							""
						]
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Hyperspace')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SparkPool01",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "ba6aa0ad-7ee5-4186-ad0b-20b29e271890"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/d8feb544-acd0-4ea1-aac6-92f13bce8188/resourceGroups/data-engineering-synapse-91628xh/providers/Microsoft.Synapse/workspaces/asaworkspace91628xh/bigDataPools/SparkPool01",
						"name": "SparkPool01",
						"type": "Spark",
						"endpoint": "https://asaworkspace91628xh.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool01",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "2.4",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"from hyperspace import *  \r\n",
							"from com.microsoft.hyperspace import *\r\n",
							"from com.microsoft.hyperspace.index import *\r\n",
							"\r\n",
							"# Disable BroadcastHashJoin, so Spark will use standard SortMergeJoin. Currently, Hyperspace indexes utilize SortMergeJoin to speed up query.\r\n",
							"spark.conf.set(\"spark.sql.autoBroadcastJoinThreshold\", -1)\r\n",
							"\r\n",
							"# Replace the value below with the name of your primary ADLS Gen2 account for your Synapse workspace\r\n",
							"datalake = 'asadatalake91628xh'\r\n",
							"\r\n",
							"dfSales = spark.read.parquet(\"abfss://wwi-02@\" + datalake + \".dfs.core.windows.net/sale-small/Year=2019/Quarter=Q4/Month=12/*/*.parquet\")\r\n",
							"dfSales.show(10)\r\n",
							"\r\n",
							"dfCustomers = spark.read.load(\"abfss://wwi-02@\" + datalake + \".dfs.core.windows.net/data-generators/generator-customer-clean.csv\", format=\"csv\", header=True)\r\n",
							"dfCustomers.show(10)\r\n",
							"\r\n",
							"# Create an instance of Hyperspace\r\n",
							"hyperspace = Hyperspace(spark)"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#create indexes: each one contains a name, a set of indexed columns and a set of included columns\r\n",
							"indexConfigSales = IndexConfig(\"indexSALES\", [\"CustomerId\"], [\"TotalAmount\"])\r\n",
							"indexConfigCustomers = IndexConfig(\"indexCUSTOMERS\", [\"CustomerId\"], [\"FullName\"])\r\n",
							"\r\n",
							"hyperspace.createIndex(dfSales, indexConfigSales)\t\t\t# only create index once\r\n",
							"hyperspace.createIndex(dfCustomers, indexConfigCustomers)\t# only create index once\r\n",
							"hyperspace.indexes().show()"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df1 = dfSales.filter(\"\"\"CustomerId = 6\"\"\").select(\"\"\"TotalAmount\"\"\")\r\n",
							"df1.show()\r\n",
							"df1.explain(True)"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Enable Hyperspace - Hyperspace optimization rules become visible to the Spark optimizer and exploit existing Hyperspace indexes to optimize user queries\r\n",
							"Hyperspace.enable(spark)\r\n",
							"df1 = dfSales.filter(\"\"\"CustomerId = 6\"\"\").select(\"\"\"TotalAmount\"\"\")\r\n",
							"df1.show()\r\n",
							"df1.explain(True)"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df1 = dfSales.filter(\"\"\"CustomerId = 6\"\"\").select(\"\"\"TotalAmount\"\"\")\r\n",
							"\r\n",
							"spark.conf.set(\"spark.hyperspace.explain.displayMode\", \"html\")\r\n",
							"hyperspace.explain(df1, True, displayHTML)"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"hyperspace.indexes().show()"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"eqJoin = dfSales.join(dfCustomers, dfSales.CustomerId == dfCustomers.CustomerId).select(dfSales.TotalAmount, dfCustomers.FullName)\r\n",
							"\r\n",
							"hyperspace.explain(eqJoin, True, displayHTML)"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Disable Hyperspace - Hyperspace rules no longer apply during query optimization. Disabling Hyperspace has no impact on created indexes because they remain intact\r\n",
							"Hyperspace.disable(spark)\r\n",
							"\r\n",
							"hyperspace.deleteIndex(\"indexSALES\")\r\n",
							"hyperspace.vacuumIndex(\"indexSALES\")\r\n",
							"hyperspace.deleteIndex(\"indexCUSTOMERS\")\r\n",
							"hyperspace.vacuumIndex(\"indexCUSTOMERS\")"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							""
						],
						"outputs": []
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Lab cleaning csv file')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SparkPool01",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "8d9b24fc-6f81-4541-8e21-c9c1307cd00b"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1",
						"state": {
							"c4055c02-da81-4a3e-aab2-bf9e1f86bd71": {
								"type": "Synapse.DataFrame",
								"sync_state": {
									"table": {
										"rows": [
											{
												"0": "7365e3cb-c098-4001-83ab-68693b87809d",
												"1": "2",
												"2": "829",
												"3": 4,
												"4": "30.500000000000000000",
												"5": "122.000000000000000000",
												"6": "20191231",
												"7": "38.640000000000000000",
												"8": 12,
												"9": 52,
												"10": "9559"
											},
											{
												"0": "7365e3cb-c098-4001-83ab-68693b87809d",
												"1": "2",
												"2": "3683",
												"3": 1,
												"4": "34.440000000000000000",
												"5": "34.440000000000000000",
												"6": "20191231",
												"7": "9.940000000000000000",
												"8": 12,
												"9": 52,
												"10": "9559"
											},
											{
												"0": "7365e3cb-c098-4001-83ab-68693b87809d",
												"1": "2",
												"2": "812",
												"3": 1,
												"4": "28.630000000000000000",
												"5": "28.630000000000000000",
												"6": "20191231",
												"7": "7.200000000000000000",
												"8": 12,
												"9": 52,
												"10": "9559"
											},
											{
												"0": "7365e3cb-c098-4001-83ab-68693b87809d",
												"1": "2",
												"2": "117",
												"3": 2,
												"4": "25.500000000000000000",
												"5": "51.000000000000000000",
												"6": "20191231",
												"7": "15.660000000000000000",
												"8": 12,
												"9": 52,
												"10": "9559"
											},
											{
												"0": "7365e3cb-c098-4001-83ab-68693b87809d",
												"1": "2",
												"2": "406",
												"3": 3,
												"4": "36.590000000000000000",
												"5": "109.770000000000000000",
												"6": "20191231",
												"7": "34.710000000000000000",
												"8": 12,
												"9": 52,
												"10": "9559"
											},
											{
												"0": "7365e3cb-c098-4001-83ab-68693b87809d",
												"1": "2",
												"2": "231",
												"3": 3,
												"4": "25.580000000000000000",
												"5": "76.740000000000000000",
												"6": "20191231",
												"7": "25.020000000000000000",
												"8": 12,
												"9": 52,
												"10": "9559"
											},
											{
												"0": "7365e3cb-c098-4001-83ab-68693b87809d",
												"1": "2",
												"2": "2689",
												"3": 3,
												"4": "24.000000000000000000",
												"5": "72.000000000000000000",
												"6": "20191231",
												"7": "19.770000000000000000",
												"8": 12,
												"9": 52,
												"10": "9559"
											},
											{
												"0": "7365e3cb-c098-4001-83ab-68693b87809d",
												"1": "2",
												"2": "2095",
												"3": 4,
												"4": "32.380000000000000000",
												"5": "129.520000000000000000",
												"6": "20191231",
												"7": "36.000000000000000000",
												"8": 12,
												"9": 52,
												"10": "9559"
											},
											{
												"0": "7365e3cb-c098-4001-83ab-68693b87809d",
												"1": "2",
												"2": "92",
												"3": 1,
												"4": "15.550000000000000000",
												"5": "15.550000000000000000",
												"6": "20191231",
												"7": "4.730000000000000000",
												"8": 12,
												"9": 52,
												"10": "9559"
											},
											{
												"0": "7365e3cb-c098-4001-83ab-68693b87809d",
												"1": "2",
												"2": "1912",
												"3": 1,
												"4": "24.620000000000000000",
												"5": "24.620000000000000000",
												"6": "20191231",
												"7": "7.390000000000000000",
												"8": 12,
												"9": 52,
												"10": "9559"
											}
										],
										"schema": [
											{
												"key": "0",
												"name": "TransactionId",
												"type": "string"
											},
											{
												"key": "1",
												"name": "CustomerId",
												"type": "int"
											},
											{
												"key": "2",
												"name": "ProductId",
												"type": "smallint"
											},
											{
												"key": "3",
												"name": "Quantity",
												"type": "tinyint"
											},
											{
												"key": "4",
												"name": "Price",
												"type": "decimal"
											},
											{
												"key": "5",
												"name": "TotalAmount",
												"type": "decimal"
											},
											{
												"key": "6",
												"name": "TransactionDate",
												"type": "int"
											},
											{
												"key": "7",
												"name": "ProfitAmount",
												"type": "decimal"
											},
											{
												"key": "8",
												"name": "Hour",
												"type": "tinyint"
											},
											{
												"key": "9",
												"name": "Minute",
												"type": "tinyint"
											},
											{
												"key": "10",
												"name": "StoreId",
												"type": "smallint"
											}
										],
										"truncated": false
									},
									"isSummary": false,
									"language": "scala"
								},
								"persist_state": {
									"view": {
										"type": "details",
										"chartOptions": {
											"chartType": "bar",
											"aggregationType": "sum",
											"categoryFieldKeys": [
												"2"
											],
											"seriesFieldKeys": [
												"5"
											],
											"isStacked": false
										}
									}
								}
							},
							"f8d53e8f-5c55-4489-aa49-5443ba807317": {
								"type": "Synapse.DataFrame",
								"sync_state": {
									"table": {
										"rows": [
											{
												"0": "20191231",
												"1": "4443",
												"2": "2371.880000000000000000",
												"3": "2.4672",
												"4": "301"
											},
											{
												"0": "20191231",
												"1": "2647",
												"2": "15347.850000000000000000",
												"3": "2.5285",
												"4": "1555"
											},
											{
												"0": "20191231",
												"1": "223",
												"2": "47663.640000000000000000",
												"3": "2.5266",
												"4": "5076"
											},
											{
												"0": "20191231",
												"1": "3977",
												"2": "14202.540000000000000000",
												"3": "2.5668",
												"4": "1594"
											},
											{
												"0": "20191231",
												"1": "4232",
												"2": "9918.700000000000000000",
												"3": "2.4991",
												"4": "1397"
											},
											{
												"0": "20191231",
												"1": "1585",
												"2": "12404.340000000000000000",
												"3": "2.4703",
												"4": "1539"
											},
											{
												"0": "20191231",
												"1": "4646",
												"2": "1975.480000000000000000",
												"3": "2.3604",
												"4": "262"
											},
											{
												"0": "20191231",
												"1": "3036",
												"2": "1150.100000000000000000",
												"3": "2.5481",
												"4": "265"
											},
											{
												"0": "20191231",
												"1": "1620",
												"2": "17613.960000000000000000",
												"3": "2.4777",
												"4": "1613"
											},
											{
												"0": "20191231",
												"1": "669",
												"2": "2422.080000000000000000",
												"3": "2.5043",
												"4": "288"
											},
											{
												"0": "20191231",
												"1": "1655",
												"2": "3088.500000000000000000",
												"3": "2.4786",
												"4": "290"
											},
											{
												"0": "20191231",
												"1": "1527",
												"2": "2148.580000000000000000",
												"3": "2.569",
												"4": "298"
											},
											{
												"0": "20191231",
												"1": "1399",
												"2": "2797.200000000000000000",
												"3": "2.4561",
												"4": "280"
											},
											{
												"0": "20191231",
												"1": "2122",
												"2": "2080.330000000000000000",
												"3": "2.4128",
												"4": "263"
											},
											{
												"0": "20191231",
												"1": "3824",
												"2": "2486.070000000000000000",
												"3": "2.494",
												"4": "207"
											},
											{
												"0": "20191231",
												"1": "4194",
												"2": "1617.840000000000000000",
												"3": "2.4231",
												"4": "252"
											},
											{
												"0": "20191231",
												"1": "863",
												"2": "1860.240000000000000000",
												"3": "2.339",
												"4": "276"
											},
											{
												"0": "20191231",
												"1": "2034",
												"2": "2452.730000000000000000",
												"3": "2.7263",
												"4": "259"
											},
											{
												"0": "20191231",
												"1": "1213",
												"2": "1590.880000000000000000",
												"3": "2.4158",
												"4": "244"
											},
											{
												"0": "20191231",
												"1": "3298",
												"2": "1747.620000000000000000",
												"3": "2.6869",
												"4": "266"
											},
											{
												"0": "20191231",
												"1": "3079",
												"2": "2413.740000000000000000",
												"3": "2.625",
												"4": "294"
											},
											{
												"0": "20191231",
												"1": "3983",
												"2": "14352.280000000000000000",
												"3": "2.554",
												"4": "1609"
											},
											{
												"0": "20191231",
												"1": "2053",
												"2": "2604.000000000000000000",
												"3": "2.6316",
												"4": "300"
											},
											{
												"0": "20191231",
												"1": "4901",
												"2": "6881.940000000000000000",
												"3": "2.5153",
												"4": "1557"
											},
											{
												"0": "20191231",
												"1": "177",
												"2": "52192.600000000000000000",
												"3": "2.486",
												"4": "6404"
											},
											{
												"0": "20191231",
												"1": "4409",
												"2": "1760.260000000000000000",
												"3": "2.5044",
												"4": "283"
											},
											{
												"0": "20191231",
												"1": "1388",
												"2": "3491.800000000000000000",
												"3": "2.5564",
												"4": "340"
											},
											{
												"0": "20191231",
												"1": "4830",
												"2": "2997.360000000000000000",
												"3": "2.4425",
												"4": "276"
											},
											{
												"0": "20191231",
												"1": "3024",
												"2": "3446.300000000000000000",
												"3": "2.6729",
												"4": "286"
											},
											{
												"0": "20191231",
												"1": "3399",
												"2": "1673.600000000000000000",
												"3": "2.6016",
												"4": "320"
											},
											{
												"0": "20191231",
												"1": "4454",
												"2": "1376.160000000000000000",
												"3": "2.4646",
												"4": "244"
											},
											{
												"0": "20191231",
												"1": "4380",
												"2": "2092.230000000000000000",
												"3": "2.4059",
												"4": "243"
											},
											{
												"0": "20191231",
												"1": "4339",
												"2": "1094.450000000000000000",
												"3": "2.3661",
												"4": "265"
											},
											{
												"0": "20191231",
												"1": "454",
												"2": "1937.760000000000000000",
												"3": "2.4673",
												"4": "264"
											},
											{
												"0": "20191231",
												"1": "2216",
												"2": "2635.290000000000000000",
												"3": "2.4953",
												"4": "267"
											},
											{
												"0": "20191231",
												"1": "3335",
												"2": "2432.010000000000000000",
												"3": "2.5392",
												"4": "259"
											},
											{
												"0": "20191231",
												"1": "1960",
												"2": "2259.900000000000000000",
												"3": "2.5596",
												"4": "279"
											},
											{
												"0": "20191231",
												"1": "3310",
												"2": "2214.800000000000000000",
												"3": "2.5",
												"4": "280"
											},
											{
												"0": "20191231",
												"1": "3025",
												"2": "1341.120000000000000000",
												"3": "2.3519",
												"4": "254"
											},
											{
												"0": "20191231",
												"1": "1128",
												"2": "2737.050000000000000000",
												"3": "2.3578",
												"4": "257"
											},
											{
												"0": "20191231",
												"1": "4561",
												"2": "2310.860000000000000000",
												"3": "2.6706",
												"4": "227"
											},
											{
												"0": "20191231",
												"1": "3683",
												"2": "15655.500000000000000000",
												"3": "2.4842",
												"4": "1575"
											},
											{
												"0": "20191231",
												"1": "2592",
												"2": "1564.920000000000000000",
												"3": "2.4059",
												"4": "243"
											},
											{
												"0": "20191231",
												"1": "249",
												"2": "53177.360000000000000000",
												"3": "2.4761",
												"4": "5128"
											},
											{
												"0": "20191231",
												"1": "4755",
												"2": "1670.720000000000000000",
												"3": "2.3402",
												"4": "227"
											},
											{
												"0": "20191231",
												"1": "1608",
												"2": "3161.070000000000000000",
												"3": "2.5259",
												"4": "341"
											},
											{
												"0": "20191231",
												"1": "367",
												"2": "2404.980000000000000000",
												"3": "2.4052",
												"4": "279"
											},
											{
												"0": "20191231",
												"1": "2381",
												"2": "13243.420000000000000000",
												"3": "2.5023",
												"4": "1619"
											},
											{
												"0": "20191231",
												"1": "2206",
												"2": "11490.960000000000000000",
												"3": "2.519",
												"4": "1524"
											},
											{
												"0": "20191231",
												"1": "2724",
												"2": "15377.200000000000000000",
												"3": "2.5085",
												"4": "1480"
											},
											{
												"0": "20191231",
												"1": "4548",
												"2": "20172.880000000000000000",
												"3": "2.4831",
												"4": "1547"
											},
											{
												"0": "20191231",
												"1": "2931",
												"2": "2302.720000000000000000",
												"3": "2.57",
												"4": "257"
											},
											{
												"0": "20191231",
												"1": "996",
												"2": "2077.660000000000000000",
												"3": "2.4259",
												"4": "262"
											},
											{
												"0": "20191231",
												"1": "1402",
												"2": "1653.540000000000000000",
												"3": "2.54",
												"4": "254"
											},
											{
												"0": "20191231",
												"1": "451",
												"2": "1756.860000000000000000",
												"3": "2.6111",
												"4": "282"
											},
											{
												"0": "20191231",
												"1": "4679",
												"2": "2794.140000000000000000",
												"3": "2.5545",
												"4": "258"
											},
											{
												"0": "20191231",
												"1": "4396",
												"2": "2181.590000000000000000",
												"3": "2.5619",
												"4": "269"
											},
											{
												"0": "20191231",
												"1": "3798",
												"2": "2251.530000000000000000",
												"3": "2.7732",
												"4": "269"
											},
											{
												"0": "20191231",
												"1": "2487",
												"2": "9516.780000000000000000",
												"3": "2.4776",
												"4": "1494"
											},
											{
												"0": "20191231",
												"1": "4779",
												"2": "3398.640000000000000000",
												"3": "2.3496",
												"4": "289"
											},
											{
												"0": "20191231",
												"1": "1511",
												"2": "1863.040000000000000000",
												"3": "2.5038",
												"4": "328"
											},
											{
												"0": "20191231",
												"1": "368",
												"2": "2477.230000000000000000",
												"3": "2.4274",
												"4": "301"
											},
											{
												"0": "20191231",
												"1": "1278",
												"2": "3481.590000000000000000",
												"3": "2.5315",
												"4": "281"
											},
											{
												"0": "20191231",
												"1": "1908",
												"2": "3640.800000000000000000",
												"3": "2.8522",
												"4": "328"
											},
											{
												"0": "20191231",
												"1": "3581",
												"2": "2929.340000000000000000",
												"3": "2.547",
												"4": "298"
											},
											{
												"0": "20191231",
												"1": "4041",
												"2": "13716.560000000000000000",
												"3": "2.5168",
												"4": "1573"
											},
											{
												"0": "20191231",
												"1": "237",
												"2": "32047.550000000000000000",
												"3": "2.4902",
												"4": "5095"
											},
											{
												"0": "20191231",
												"1": "692",
												"2": "9760.710000000000000000",
												"3": "2.5155",
												"4": "1459"
											},
											{
												"0": "20191231",
												"1": "57",
												"2": "45311.360000000000000000",
												"3": "2.5441",
												"4": "5312"
											},
											{
												"0": "20191231",
												"1": "2890",
												"2": "12905.430000000000000000",
												"3": "2.5008",
												"4": "1553"
											},
											{
												"0": "20191231",
												"1": "1990",
												"2": "15236.500000000000000000",
												"3": "2.484",
												"4": "1550"
											},
											{
												"0": "20191231",
												"1": "3457",
												"2": "2115.000000000000000000",
												"3": "2.6549",
												"4": "300"
											},
											{
												"0": "20191231",
												"1": "3362",
												"2": "2664.420000000000000000",
												"3": "2.5208",
												"4": "242"
											},
											{
												"0": "20191231",
												"1": "790",
												"2": "2317.030000000000000000",
												"3": "2.5288",
												"4": "263"
											},
											{
												"0": "20191231",
												"1": "2045",
												"2": "3589.950000000000000000",
												"3": "2.4811",
												"4": "263"
											},
											{
												"0": "20191231",
												"1": "1991",
												"2": "1596.120000000000000000",
												"3": "2.4397",
												"4": "283"
											},
											{
												"0": "20191231",
												"1": "2435",
												"2": "3203.820000000000000000",
												"3": "2.5289",
												"4": "306"
											},
											{
												"0": "20191231",
												"1": "518",
												"2": "3602.200000000000000000",
												"3": "2.6496",
												"4": "310"
											},
											{
												"0": "20191231",
												"1": "3194",
												"2": "3461.640000000000000000",
												"3": "2.3481",
												"4": "317"
											},
											{
												"0": "20191231",
												"1": "4955",
												"2": "2159.700000000000000000",
												"3": "2.5868",
												"4": "313"
											},
											{
												"0": "20191231",
												"1": "1645",
												"2": "2120.800000000000000000",
												"3": "2.211",
												"4": "241"
											},
											{
												"0": "20191231",
												"1": "4500",
												"2": "2430.090000000000000000",
												"3": "2.5833",
												"4": "279"
											},
											{
												"0": "20191231",
												"1": "2814",
												"2": "2403.960000000000000000",
												"3": "2.5126",
												"4": "299"
											},
											{
												"0": "20191231",
												"1": "3730",
												"2": "1256.700000000000000000",
												"3": "2.5652",
												"4": "295"
											},
											{
												"0": "20191231",
												"1": "959",
												"2": "14886.560000000000000000",
												"3": "2.5323",
												"4": "1684"
											},
											{
												"0": "20191231",
												"1": "1750",
												"2": "14026.600000000000000000",
												"3": "2.4274",
												"4": "1505"
											},
											{
												"0": "20191231",
												"1": "882",
												"2": "2540.400000000000000000",
												"3": "2.4957",
												"4": "292"
											},
											{
												"0": "20191231",
												"1": "4008",
												"2": "2301.390000000000000000",
												"3": "2.6019",
												"4": "281"
											},
											{
												"0": "20191231",
												"1": "2958",
												"2": "2501.700000000000000000",
												"3": "2.5377",
												"4": "269"
											},
											{
												"0": "20191231",
												"1": "2686",
												"2": "10102.810000000000000000",
												"3": "2.5901",
												"4": "1681"
											},
											{
												"0": "20191231",
												"1": "4953",
												"2": "13620.600000000000000000",
												"3": "2.4849",
												"4": "1645"
											},
											{
												"0": "20191231",
												"1": "3365",
												"2": "17141.280000000000000000",
												"3": "2.4639",
												"4": "1742"
											},
											{
												"0": "20191231",
												"1": "1065",
												"2": "5284.800000000000000000",
												"3": "2.459",
												"4": "1468"
											},
											{
												"0": "20191231",
												"1": "2336",
												"2": "3567.640000000000000000",
												"3": "2.3759",
												"4": "316"
											},
											{
												"0": "20191231",
												"1": "1054",
												"2": "1375.140000000000000000",
												"3": "2.367",
												"4": "258"
											},
											{
												"0": "20191231",
												"1": "366",
												"2": "12781.230000000000000000",
												"3": "2.4497",
												"4": "1509"
											},
											{
												"0": "20191231",
												"1": "2605",
												"2": "1912.560000000000000000",
												"3": "2.5785",
												"4": "312"
											},
											{
												"0": "20191231",
												"1": "4466",
												"2": "1721.340000000000000000",
												"3": "2.3053",
												"4": "219"
											},
											{
												"0": "20191231",
												"1": "2376",
												"2": "2929.050000000000000000",
												"3": "2.4609",
												"4": "283"
											},
											{
												"0": "20191231",
												"1": "1823",
												"2": "2976.720000000000000000",
												"3": "2.7544",
												"4": "314"
											}
										],
										"schema": [
											{
												"key": "0",
												"name": "TransactionDate",
												"type": "int"
											},
											{
												"key": "1",
												"name": "ProductId",
												"type": "smallint"
											},
											{
												"key": "2",
												"name": "(sum)ProfitAmount",
												"type": "decimal"
											},
											{
												"key": "3",
												"name": "(avg)Quantity",
												"type": "double"
											},
											{
												"key": "4",
												"name": "(sum)Quantity",
												"type": "bigint"
											}
										],
										"truncated": false
									},
									"isSummary": false,
									"language": "scala"
								},
								"persist_state": {
									"view": {
										"type": "details",
										"chartOptions": {
											"chartType": "bar",
											"aggregationType": "sum",
											"categoryFieldKeys": [
												"1"
											],
											"seriesFieldKeys": [
												"0"
											],
											"isStacked": false
										}
									}
								}
							},
							"73b01360-4441-4ce1-ae1c-2240f150535f": {
								"type": "Synapse.DataFrame",
								"sync_state": {
									"table": {
										"rows": [
											{
												"0": "117901",
												"1": "444",
												"2": "99"
											},
											{
												"0": "106847",
												"1": "781",
												"2": "99"
											},
											{
												"0": "117914",
												"1": "2002",
												"2": "99"
											},
											{
												"0": "117019",
												"1": "1876",
												"2": "99"
											},
											{
												"0": "117916",
												"1": "4523",
												"2": "99"
											},
											{
												"0": "117044",
												"1": "4502",
												"2": "99"
											},
											{
												"0": "117919",
												"1": "1686",
												"2": "99"
											},
											{
												"0": "117060",
												"1": "1044",
												"2": "99"
											},
											{
												"0": "117930",
												"1": "2590",
												"2": "99"
											},
											{
												"0": "117068",
												"1": "3151",
												"2": "99"
											},
											{
												"0": "117939",
												"1": "3828",
												"2": "99"
											},
											{
												"0": "117084",
												"1": "912",
												"2": "99"
											},
											{
												"0": "117946",
												"1": "511",
												"2": "99"
											},
											{
												"0": "117135",
												"1": "2972",
												"2": "99"
											},
											{
												"0": "117951",
												"1": "593",
												"2": "99"
											},
											{
												"0": "117179",
												"1": "1569",
												"2": "99"
											},
											{
												"0": "117971",
												"1": "37",
												"2": "99"
											},
											{
												"0": "117199",
												"1": "2093",
												"2": "99"
											},
											{
												"0": "117973",
												"1": "1395",
												"2": "99"
											},
											{
												"0": "117231",
												"1": "1757",
												"2": "99"
											},
											{
												"0": "117989",
												"1": "4820",
												"2": "99"
											},
											{
												"0": "117247",
												"1": "2484",
												"2": "99"
											},
											{
												"0": "117991",
												"1": "4362",
												"2": "99"
											},
											{
												"0": "117255",
												"1": "2686",
												"2": "99"
											},
											{
												"0": "117996",
												"1": "4071",
												"2": "99"
											},
											{
												"0": "117284",
												"1": "499",
												"2": "99"
											},
											{
												"0": "117998",
												"1": "3347",
												"2": "99"
											},
											{
												"0": "117287",
												"1": "503",
												"2": "99"
											},
											{
												"0": "106004",
												"1": "3853",
												"2": "99"
											},
											{
												"0": "117301",
												"1": "2087",
												"2": "99"
											},
											{
												"0": "106006",
												"1": "1862",
												"2": "99"
											},
											{
												"0": "117321",
												"1": "4648",
												"2": "99"
											},
											{
												"0": "106011",
												"1": "4345",
												"2": "99"
											},
											{
												"0": "117349",
												"1": "442",
												"2": "99"
											},
											{
												"0": "106013",
												"1": "1720",
												"2": "99"
											},
											{
												"0": "117358",
												"1": "2458",
												"2": "99"
											},
											{
												"0": "106026",
												"1": "3961",
												"2": "99"
											},
											{
												"0": "117376",
												"1": "639",
												"2": "99"
											},
											{
												"0": "106028",
												"1": "2604",
												"2": "99"
											},
											{
												"0": "117381",
												"1": "177",
												"2": "99"
											},
											{
												"0": "106034",
												"1": "4386",
												"2": "99"
											},
											{
												"0": "117404",
												"1": "2068",
												"2": "99"
											},
											{
												"0": "106037",
												"1": "1722",
												"2": "99"
											},
											{
												"0": "117420",
												"1": "1000",
												"2": "99"
											},
											{
												"0": "106038",
												"1": "3367",
												"2": "99"
											},
											{
												"0": "117421",
												"1": "2789",
												"2": "99"
											},
											{
												"0": "106042",
												"1": "1312",
												"2": "99"
											},
											{
												"0": "117423",
												"1": "2067",
												"2": "99"
											},
											{
												"0": "106043",
												"1": "3032",
												"2": "99"
											},
											{
												"0": "117427",
												"1": "2355",
												"2": "99"
											},
											{
												"0": "106047",
												"1": "4330",
												"2": "99"
											},
											{
												"0": "117435",
												"1": "18",
												"2": "99"
											},
											{
												"0": "106051",
												"1": "3441",
												"2": "99"
											},
											{
												"0": "117450",
												"1": "2877",
												"2": "99"
											},
											{
												"0": "106053",
												"1": "4679",
												"2": "99"
											},
											{
												"0": "117515",
												"1": "1863",
												"2": "99"
											},
											{
												"0": "106056",
												"1": "666",
												"2": "99"
											},
											{
												"0": "117582",
												"1": "2404",
												"2": "99"
											},
											{
												"0": "106057",
												"1": "2002",
												"2": "99"
											},
											{
												"0": "117591",
												"1": "4721",
												"2": "99"
											},
											{
												"0": "106059",
												"1": "4276",
												"2": "99"
											},
											{
												"0": "117608",
												"1": "1628",
												"2": "99"
											},
											{
												"0": "106068",
												"1": "1705",
												"2": "99"
											},
											{
												"0": "117620",
												"1": "1806",
												"2": "99"
											},
											{
												"0": "106073",
												"1": "3446",
												"2": "99"
											},
											{
												"0": "117629",
												"1": "4549",
												"2": "99"
											},
											{
												"0": "106079",
												"1": "3508",
												"2": "99"
											},
											{
												"0": "117644",
												"1": "4188",
												"2": "99"
											},
											{
												"0": "106080",
												"1": "2606",
												"2": "99"
											},
											{
												"0": "117689",
												"1": "2760",
												"2": "99"
											},
											{
												"0": "106081",
												"1": "9",
												"2": "99"
											},
											{
												"0": "117705",
												"1": "2535",
												"2": "99"
											},
											{
												"0": "106087",
												"1": "1944",
												"2": "99"
											},
											{
												"0": "117730",
												"1": "4921",
												"2": "99"
											},
											{
												"0": "106088",
												"1": "1376",
												"2": "99"
											},
											{
												"0": "117752",
												"1": "3966",
												"2": "99"
											},
											{
												"0": "106094",
												"1": "4651",
												"2": "99"
											},
											{
												"0": "117801",
												"1": "4299",
												"2": "99"
											},
											{
												"0": "106098",
												"1": "1617",
												"2": "99"
											},
											{
												"0": "117826",
												"1": "4825",
												"2": "99"
											},
											{
												"0": "106100",
												"1": "394",
												"2": "99"
											},
											{
												"0": "117835",
												"1": "2190",
												"2": "99"
											},
											{
												"0": "106103",
												"1": "3491",
												"2": "99"
											},
											{
												"0": "117870",
												"1": "967",
												"2": "99"
											},
											{
												"0": "106138",
												"1": "4254",
												"2": "99"
											},
											{
												"0": "117890",
												"1": "4607",
												"2": "99"
											},
											{
												"0": "106140",
												"1": "1427",
												"2": "99"
											},
											{
												"0": "117892",
												"1": "4263",
												"2": "99"
											},
											{
												"0": "106154",
												"1": "525",
												"2": "99"
											},
											{
												"0": "106231",
												"1": "108",
												"2": "99"
											},
											{
												"0": "106846",
												"1": "4299",
												"2": "99"
											},
											{
												"0": "106233",
												"1": "1209",
												"2": "99"
											},
											{
												"0": "117035",
												"1": "2568",
												"2": "99"
											},
											{
												"0": "106240",
												"1": "4701",
												"2": "99"
											},
											{
												"0": "117068",
												"1": "4441",
												"2": "99"
											},
											{
												"0": "106255",
												"1": "159",
												"2": "99"
											},
											{
												"0": "117087",
												"1": "3490",
												"2": "99"
											},
											{
												"0": "106258",
												"1": "2714",
												"2": "99"
											},
											{
												"0": "117194",
												"1": "4164",
												"2": "99"
											},
											{
												"0": "106283",
												"1": "4745",
												"2": "99"
											}
										],
										"schema": [
											{
												"key": "0",
												"name": "visitorId",
												"type": "bigint"
											},
											{
												"key": "1",
												"name": "productId",
												"type": "bigint"
											},
											{
												"key": "2",
												"name": "itemsPurchasedLast12Months",
												"type": "bigint"
											}
										],
										"truncated": false
									},
									"isSummary": false,
									"language": "scala"
								},
								"persist_state": {
									"view": {
										"type": "details",
										"chartOptions": {
											"chartType": "bar",
											"aggregationType": "sum",
											"categoryFieldKeys": [
												"1"
											],
											"seriesFieldKeys": [
												"0"
											],
											"isStacked": false
										}
									}
								}
							},
							"88925f17-b96a-4bc0-bf10-27a1b4a9a7e7": {
								"type": "Synapse.DataFrame",
								"sync_state": {
									"table": {
										"rows": [
											{
												"0": "80000",
												"1": "20"
											},
											{
												"0": "80001",
												"1": "20"
											},
											{
												"0": "80002",
												"1": "15"
											},
											{
												"0": "80003",
												"1": "12"
											},
											{
												"0": "80004",
												"1": "10"
											},
											{
												"0": "80005",
												"1": "13"
											},
											{
												"0": "80006",
												"1": "6"
											},
											{
												"0": "80007",
												"1": "18"
											},
											{
												"0": "80008",
												"1": "4"
											},
											{
												"0": "80009",
												"1": "16"
											},
											{
												"0": "80010",
												"1": "3"
											},
											{
												"0": "80011",
												"1": "17"
											},
											{
												"0": "80012",
												"1": "19"
											},
											{
												"0": "80013",
												"1": "6"
											},
											{
												"0": "80014",
												"1": "20"
											},
											{
												"0": "80015",
												"1": "12"
											},
											{
												"0": "80016",
												"1": "6"
											},
											{
												"0": "80017",
												"1": "1"
											},
											{
												"0": "80018",
												"1": "17"
											},
											{
												"0": "80019",
												"1": "14"
											},
											{
												"0": "80020",
												"1": "9"
											},
											{
												"0": "80021",
												"1": "18"
											},
											{
												"0": "80022",
												"1": "13"
											},
											{
												"0": "80023",
												"1": "10"
											},
											{
												"0": "80024",
												"1": "4"
											},
											{
												"0": "80025",
												"1": "13"
											},
											{
												"0": "80026",
												"1": "19"
											},
											{
												"0": "80027",
												"1": "13"
											},
											{
												"0": "80028",
												"1": "1"
											},
											{
												"0": "80029",
												"1": "4"
											},
											{
												"0": "80030",
												"1": "1"
											},
											{
												"0": "80031",
												"1": "9"
											},
											{
												"0": "80032",
												"1": "17"
											},
											{
												"0": "80033",
												"1": "8"
											},
											{
												"0": "80034",
												"1": "14"
											},
											{
												"0": "80035",
												"1": "11"
											},
											{
												"0": "80036",
												"1": "19"
											},
											{
												"0": "80037",
												"1": "10"
											},
											{
												"0": "80038",
												"1": "3"
											},
											{
												"0": "80039",
												"1": "4"
											},
											{
												"0": "80040",
												"1": "17"
											},
											{
												"0": "80041",
												"1": "6"
											},
											{
												"0": "80042",
												"1": "9"
											},
											{
												"0": "80043",
												"1": "2"
											},
											{
												"0": "80044",
												"1": "19"
											},
											{
												"0": "80045",
												"1": "6"
											},
											{
												"0": "80046",
												"1": "17"
											},
											{
												"0": "80047",
												"1": "4"
											},
											{
												"0": "80048",
												"1": "13"
											},
											{
												"0": "80049",
												"1": "16"
											},
											{
												"0": "80050",
												"1": "5"
											},
											{
												"0": "80051",
												"1": "17"
											},
											{
												"0": "80052",
												"1": "9"
											},
											{
												"0": "80053",
												"1": "4"
											},
											{
												"0": "80054",
												"1": "10"
											},
											{
												"0": "80055",
												"1": "18"
											},
											{
												"0": "80056",
												"1": "13"
											},
											{
												"0": "80057",
												"1": "9"
											},
											{
												"0": "80058",
												"1": "3"
											},
											{
												"0": "80059",
												"1": "14"
											},
											{
												"0": "80060",
												"1": "4"
											},
											{
												"0": "80061",
												"1": "6"
											},
											{
												"0": "80062",
												"1": "19"
											},
											{
												"0": "80063",
												"1": "3"
											},
											{
												"0": "80064",
												"1": "3"
											},
											{
												"0": "80066",
												"1": "4"
											},
											{
												"0": "80067",
												"1": "6"
											},
											{
												"0": "80068",
												"1": "5"
											},
											{
												"0": "80069",
												"1": "11"
											},
											{
												"0": "80070",
												"1": "8"
											},
											{
												"0": "80071",
												"1": "8"
											},
											{
												"0": "80072",
												"1": "5"
											},
											{
												"0": "80073",
												"1": "14"
											},
											{
												"0": "80074",
												"1": "12"
											},
											{
												"0": "80075",
												"1": "7"
											},
											{
												"0": "80076",
												"1": "12"
											},
											{
												"0": "80077",
												"1": "1"
											},
											{
												"0": "80078",
												"1": "6"
											},
											{
												"0": "80079",
												"1": "4"
											},
											{
												"0": "80080",
												"1": "19"
											},
											{
												"0": "80081",
												"1": "14"
											},
											{
												"0": "80082",
												"1": "15"
											},
											{
												"0": "80083",
												"1": "12"
											},
											{
												"0": "80084",
												"1": "5"
											},
											{
												"0": "80086",
												"1": "7"
											},
											{
												"0": "80087",
												"1": "1"
											},
											{
												"0": "80088",
												"1": "2"
											},
											{
												"0": "80089",
												"1": "9"
											},
											{
												"0": "80090",
												"1": "1"
											},
											{
												"0": "80091",
												"1": "10"
											},
											{
												"0": "80092",
												"1": "11"
											},
											{
												"0": "80093",
												"1": "6"
											},
											{
												"0": "80094",
												"1": "19"
											},
											{
												"0": "80095",
												"1": "1"
											},
											{
												"0": "80096",
												"1": "19"
											},
											{
												"0": "80097",
												"1": "19"
											},
											{
												"0": "80098",
												"1": "15"
											},
											{
												"0": "80099",
												"1": "8"
											},
											{
												"0": "80100",
												"1": "11"
											},
											{
												"0": "80101",
												"1": "6"
											}
										],
										"schema": [
											{
												"key": "0",
												"name": "visitorId",
												"type": "bigint"
											},
											{
												"key": "1",
												"name": "total",
												"type": "bigint"
											}
										],
										"truncated": false
									},
									"isSummary": false,
									"language": "scala"
								},
								"persist_state": {
									"view": {
										"type": "details",
										"chartOptions": {
											"chartType": "bar",
											"aggregationType": "sum",
											"categoryFieldKeys": [
												"1"
											],
											"seriesFieldKeys": [
												"0"
											],
											"isStacked": false
										}
									}
								}
							},
							"1708d5fe-10db-475f-bb12-dc0c6dbf5d2e": {
								"type": "Synapse.DataFrame",
								"sync_state": {
									"table": {
										"rows": [
											{
												"0": "80000",
												"1": "1054"
											},
											{
												"0": "80001",
												"1": "834"
											},
											{
												"0": "80002",
												"1": "754"
											},
											{
												"0": "80003",
												"1": "684"
											},
											{
												"0": "80004",
												"1": "598"
											},
											{
												"0": "80005",
												"1": "615"
											},
											{
												"0": "80006",
												"1": "348"
											},
											{
												"0": "80007",
												"1": "932"
											},
											{
												"0": "80008",
												"1": "199"
											},
											{
												"0": "80009",
												"1": "787"
											},
											{
												"0": "80010",
												"1": "97"
											},
											{
												"0": "80011",
												"1": "931"
											},
											{
												"0": "80012",
												"1": "1042"
											},
											{
												"0": "80013",
												"1": "313"
											},
											{
												"0": "80014",
												"1": "1084"
											},
											{
												"0": "80015",
												"1": "496"
											},
											{
												"0": "80016",
												"1": "429"
											},
											{
												"0": "80017",
												"1": "76"
											},
											{
												"0": "80018",
												"1": "733"
											},
											{
												"0": "80019",
												"1": "743"
											},
											{
												"0": "80020",
												"1": "502"
											},
											{
												"0": "80021",
												"1": "921"
											},
											{
												"0": "80022",
												"1": "662"
											},
											{
												"0": "80023",
												"1": "461"
											},
											{
												"0": "80024",
												"1": "143"
											},
											{
												"0": "80025",
												"1": "747"
											},
											{
												"0": "80026",
												"1": "909"
											},
											{
												"0": "80027",
												"1": "681"
											},
											{
												"0": "80028",
												"1": "72"
											},
											{
												"0": "80029",
												"1": "227"
											},
											{
												"0": "80030",
												"1": "4"
											},
											{
												"0": "80031",
												"1": "654"
											},
											{
												"0": "80032",
												"1": "877"
											},
											{
												"0": "80033",
												"1": "331"
											},
											{
												"0": "80034",
												"1": "651"
											},
											{
												"0": "80035",
												"1": "496"
											},
											{
												"0": "80036",
												"1": "1045"
											},
											{
												"0": "80037",
												"1": "476"
											},
											{
												"0": "80038",
												"1": "139"
											},
											{
												"0": "80039",
												"1": "211"
											},
											{
												"0": "80040",
												"1": "913"
											},
											{
												"0": "80041",
												"1": "290"
											},
											{
												"0": "80042",
												"1": "427"
											},
											{
												"0": "80043",
												"1": "24"
											},
											{
												"0": "80044",
												"1": "728"
											},
											{
												"0": "80045",
												"1": "314"
											},
											{
												"0": "80046",
												"1": "613"
											},
											{
												"0": "80047",
												"1": "194"
											},
											{
												"0": "80048",
												"1": "708"
											},
											{
												"0": "80049",
												"1": "981"
											},
											{
												"0": "80050",
												"1": "234"
											},
											{
												"0": "80051",
												"1": "788"
											},
											{
												"0": "80052",
												"1": "395"
											},
											{
												"0": "80053",
												"1": "234"
											},
											{
												"0": "80054",
												"1": "391"
											},
											{
												"0": "80055",
												"1": "1137"
											},
											{
												"0": "80056",
												"1": "440"
											},
											{
												"0": "80057",
												"1": "474"
											},
											{
												"0": "80058",
												"1": "50"
											},
											{
												"0": "80059",
												"1": "677"
											},
											{
												"0": "80060",
												"1": "158"
											},
											{
												"0": "80061",
												"1": "212"
											},
											{
												"0": "80062",
												"1": "1009"
											},
											{
												"0": "80063",
												"1": "113"
											},
											{
												"0": "80064",
												"1": "132"
											},
											{
												"0": "80066",
												"1": "141"
											},
											{
												"0": "80067",
												"1": "381"
											},
											{
												"0": "80068",
												"1": "329"
											},
											{
												"0": "80069",
												"1": "524"
											},
											{
												"0": "80070",
												"1": "422"
											},
											{
												"0": "80071",
												"1": "322"
											},
											{
												"0": "80072",
												"1": "352"
											},
											{
												"0": "80073",
												"1": "770"
											},
											{
												"0": "80074",
												"1": "398"
											},
											{
												"0": "80075",
												"1": "185"
											},
											{
												"0": "80076",
												"1": "425"
											},
											{
												"0": "80077",
												"1": "84"
											},
											{
												"0": "80078",
												"1": "383"
											},
											{
												"0": "80079",
												"1": "250"
											},
											{
												"0": "80080",
												"1": "946"
											},
											{
												"0": "80081",
												"1": "540"
											},
											{
												"0": "80082",
												"1": "566"
											},
											{
												"0": "80083",
												"1": "726"
											},
											{
												"0": "80084",
												"1": "257"
											},
											{
												"0": "80086",
												"1": "270"
											},
											{
												"0": "80087",
												"1": "20"
											},
											{
												"0": "80088",
												"1": "27"
											},
											{
												"0": "80089",
												"1": "488"
											},
											{
												"0": "80090",
												"1": "34"
											},
											{
												"0": "80091",
												"1": "314"
											},
											{
												"0": "80092",
												"1": "535"
											},
											{
												"0": "80093",
												"1": "279"
											},
											{
												"0": "80094",
												"1": "937"
											},
											{
												"0": "80095",
												"1": "42"
											},
											{
												"0": "80096",
												"1": "807"
											},
											{
												"0": "80097",
												"1": "984"
											},
											{
												"0": "80098",
												"1": "744"
											},
											{
												"0": "80099",
												"1": "375"
											},
											{
												"0": "80100",
												"1": "510"
											},
											{
												"0": "80101",
												"1": "222"
											}
										],
										"schema": [
											{
												"key": "0",
												"name": "visitorId",
												"type": "bigint"
											},
											{
												"key": "1",
												"name": "totalItemsPurchased",
												"type": "bigint"
											}
										],
										"truncated": false
									},
									"isSummary": false,
									"language": "scala"
								},
								"persist_state": {
									"view": {
										"type": "details",
										"chartOptions": {
											"chartType": "bar",
											"aggregationType": "sum",
											"categoryFieldKeys": [
												"1"
											],
											"seriesFieldKeys": [
												"0"
											],
											"isStacked": false
										}
									}
								}
							}
						}
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/d8feb544-acd0-4ea1-aac6-92f13bce8188/resourceGroups/data-engineering-synapse-91628xh/providers/Microsoft.Synapse/workspaces/asaworkspace91628xh/bigDataPools/SparkPool01",
						"name": "SparkPool01",
						"type": "Spark",
						"endpoint": "https://asaworkspace91628xh.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool01",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "2.4",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "python"
							},
							"collapsed": false
						},
						"source": [
							"%%pyspark\r\n",
							"df = spark.read.load('abfss://wwi-02@asadatalake91628xh.dfs.core.windows.net/sale-small/Year=2019/Quarter=Q4/Month=12/Day=20191231/sale-small-20191231-snappy.parquet', format='parquet')\r\n",
							"display(df.limit(10))\r\n",
							"\r\n",
							"datalake = 'asadatalake91628xh'\r\n",
							""
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df.printSchema()"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"from pyspark.sql import SparkSession\r\n",
							"from pyspark.sql.types import *\r\n",
							"from pyspark.sql.functions import *\r\n",
							"\r\n",
							"profitByDateProduct = (df.groupBy(\"TransactionDate\",\"ProductId\")\r\n",
							"    .agg(\r\n",
							"        sum(\"ProfitAmount\").alias(\"(sum)ProfitAmount\"),\r\n",
							"        round(avg(\"Quantity\"), 4).alias(\"(avg)Quantity\"),\r\n",
							"        sum(\"Quantity\").alias(\"(sum)Quantity\"))\r\n",
							"    .orderBy(\"TransactionDate\"))\r\n",
							"display(profitByDateProduct.limit(100))"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df = (spark.read \\\r\n",
							"        .option('inferSchema', 'true') \\\r\n",
							"        .json('abfss://wwi-02@' + datalake + '.dfs.core.windows.net/online-user-profiles-02/*.json', multiLine=True)\r\n",
							"    )\r\n",
							"\r\n",
							"df.printSchema()"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# create a view called user_profiles\r\n",
							"df.createOrReplaceTempView(\"user_profiles\")"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"\r\n",
							"SELECT * FROM user_profiles LIMIT 10"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from pyspark.sql.functions import udf, explode\r\n",
							"\r\n",
							"flat=df.select('visitorId',explode('topProductPurchases').alias('topProductPurchases_flat'))\r\n",
							"flat.show(100)"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"topPurchases = (flat.select('visitorId','topProductPurchases_flat.productId','topProductPurchases_flat.itemsPurchasedLast12Months')\r\n",
							"    .orderBy('visitorId'))\r\n",
							"\r\n",
							"topPurchases.show(100)"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"sortedTopPurchases = (topPurchases\r\n",
							"    .orderBy( col(\"itemsPurchasedLast12Months\").desc() ))\r\n",
							"\r\n",
							"display(sortedTopPurchases.limit(100))"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"groupedTopPurchases = (sortedTopPurchases.select(\"visitorId\")\r\n",
							"    .groupBy(\"visitorId\")\r\n",
							"    .agg(count(\"*\").alias(\"total\"))\r\n",
							"    .orderBy(\"visitorId\") )\r\n",
							"\r\n",
							"display(groupedTopPurchases.limit(100))"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"groupedTopPurchases = (sortedTopPurchases.select(\"visitorId\",\"itemsPurchasedLast12Months\")\r\n",
							"    .groupBy(\"visitorId\")\r\n",
							"    .agg(sum(\"itemsPurchasedLast12Months\").alias(\"totalItemsPurchased\"))\r\n",
							"    .orderBy(\"visitorId\") )\r\n",
							"\r\n",
							"display(groupedTopPurchases.limit(100))"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Create a temporary view for top purchases so we can load from Scala\r\n",
							"topPurchases.createOrReplaceTempView(\"top_purchases\")"
						],
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							""
						],
						"outputs": []
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/MSSparkUtils')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SparkPool01",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "7a8e6ecd-d7b6-4039-888c-1e5dd290f670"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/d8feb544-acd0-4ea1-aac6-92f13bce8188/resourceGroups/data-engineering-synapse-91628xh/providers/Microsoft.Synapse/workspaces/asaworkspace91628xh/bigDataPools/SparkPool01",
						"name": "SparkPool01",
						"type": "Spark",
						"endpoint": "https://asaworkspace91628xh.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool01",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "2.4",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"from notebookutils import mssparkutils\r\n",
							"\r\n",
							"#\r\n",
							"# Microsoft Spark Utilities\r\n",
							"#\r\n",
							"# https://docs.microsoft.com/en-us/azure/synapse-analytics/spark/microsoft-spark-utilities?pivots=programming-language-python\r\n",
							"#\r\n",
							"datalake = 'asadatalake91628xh'\r\n",
							"\r\n",
							"# Azure storage access info\r\n",
							"blob_account_name = datalake\r\n",
							"blob_container_name = 'wwi-02'\r\n",
							"blob_relative_path = '/'\r\n",
							"linkedServiceName = datalake\r\n",
							"blob_sas_token = mssparkutils.credentials.getConnectionStringOrCreds(linkedServiceName)\r\n",
							"\r\n",
							"# Allow SPARK to access from Blob remotely\r\n",
							"spark.conf.set('fs.azure.sas.%s.%s.blob.core.windows.net' % (blob_container_name, blob_account_name), blob_sas_token)\r\n",
							"\r\n",
							"files = mssparkutils.fs.ls('/')\r\n",
							"for file in files:\r\n",
							"    print(file.name, file.isDir, file.isFile, file.path, file.size)\r\n",
							"\r\n",
							"mssparkutils.fs.mkdirs('/SomeNewFolder')\r\n",
							"\r\n",
							"files = mssparkutils.fs.ls('/')\r\n",
							"for file in files:\r\n",
							"    print(file.name, file.isDir, file.isFile, file.path, file.size)"
						],
						"outputs": [],
						"execution_count": 12
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Notebook 1')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SparkPool01",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "7deede11-bda3-4f43-a778-8c7c5b104bf5"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/d8feb544-acd0-4ea1-aac6-92f13bce8188/resourceGroups/data-engineering-synapse-91628xh/providers/Microsoft.Synapse/workspaces/asaworkspace91628xh/bigDataPools/SparkPool01",
						"name": "SparkPool01",
						"type": "Spark",
						"endpoint": "https://asaworkspace91628xh.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool01",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "2.4",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# my stupid demo"
						]
					},
					{
						"cell_type": "code",
						"source": [
							"1+1"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## let's read"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df = spark.read.csv()"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SparkPool01')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 15
				},
				"autoScale": {
					"enabled": true,
					"maxNodeCount": 4,
					"minNodeCount": 3
				},
				"nodeCount": 0,
				"nodeSize": "Small",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "2.4",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": false,
				"annotations": []
			},
			"dependsOn": [],
			"location": "uksouth"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/demo')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 15
				},
				"autoScale": {
					"enabled": false,
					"maxNodeCount": 3,
					"minNodeCount": 3
				},
				"nodeCount": 3,
				"nodeSize": "Small",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "3.2",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": false,
				"annotations": []
			},
			"dependsOn": [],
			"location": "uksouth"
		}
	]
}